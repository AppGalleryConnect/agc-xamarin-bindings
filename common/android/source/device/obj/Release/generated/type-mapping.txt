com/huawei/hms/android/HwBuildEx = Huawei.Hms.Android.HwBuildEx
  <init>()V = .ctor()
  getSystemPropertiesInt(Ljava/lang/String;I)I = GetSystemPropertiesInt(string, int)
com/huawei/hms/android/SystemUtils = Huawei.Hms.Android.SystemUtils
  <init>()V = .ctor()
  isChinaROM()Z = IsChinaROM
  isEMUI()Z = IsEMUI
  isTVDevice()Z = IsTVDevice
  getLocalCountry()Ljava/lang/String; = LocalCountry
  a()Ljava/lang/String; = A()
  b()Ljava/lang/String; = B()
  getNetType(Landroid/content/Context;)Ljava/lang/String; = GetNetType(Android.Content.Context)
  getSystemProperties(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetSystemProperties(string, string)
  isSystemApp(Landroid/content/Context;Ljava/lang/String;)Z = IsSystemApp(Android.Content.Context, string)
com/huawei/hms/base/device/BuildConfig = Com.Huawei.Hms.Base.Device.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  LIBRARY_PACKAGE_NAME = LibraryPackageName
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/huawei/hms/common/internal/Objects = Huawei.Hms.Common.Internal.Objects
  <init>()V = .ctor()
  equal(Ljava/lang/Object;Ljava/lang/Object;)Z = Equal(Java.Lang.Object, Java.Lang.Object)
  hashCode([Ljava/lang/Object;)I = HashCode(params Java.Lang.Object[])
  toStringHelper(Ljava/lang/Object;)Lcom/huawei/hms/common/internal/Objects$ToStringHelper; = InvokeToStringHelper(Java.Lang.Object)
com/huawei/hms/common/internal/Preconditions = Huawei.Hms.Common.Internal.Preconditions
  <init>()V = .ctor()
  a()Z = A()
  checkArgument(ZLjava/lang/Object;)V = CheckArgument(bool, Java.Lang.Object)
  checkHandlerThread(Landroid/os/Handler;)V = CheckHandlerThread(Android.OS.Handler)
  checkHandlerThread(Landroid/os/Handler;Ljava/lang/String;)V = CheckHandlerThread(Android.OS.Handler, string)
  checkMainThread(Ljava/lang/String;)V = CheckMainThread(string)
  checkNotMainThread()V = CheckNotMainThread()
  checkNotNull(Ljava/lang/Object;)Ljava/lang/Object; = CheckNotNull(Java.Lang.Object)
  checkNotNull(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; = CheckNotNull(Java.Lang.Object, Java.Lang.Object)
  checkState(ZLjava/lang/Object;)V = CheckState(bool, Java.Lang.Object)
com/huawei/hms/common/PackageConstants = Huawei.Hms.Common.PackageConstants
  <init>()V = .ctor()
  APPID_HMS = AppidHms
  APPID_HMS_TV = AppidHmsTv
  HMS_SDK_VERSION_CODE = HmsSdkVersionCode
  HMS_SDK_VERSION_NAME = HmsSdkVersionName
  SERVICES_ACTION = ServicesAction
  SERVICES_PACKAGE = ServicesPackage
  SERVICES_PACKAGE_ALL_SCENE = ServicesPackageAllScene
  SERVICES_PACKAGE_APPMARKET = ServicesPackageAppmarket
  SERVICES_PACKAGE_APPMARKET_CAR = ServicesPackageAppmarketCar
  SERVICES_PACKAGE_APPMARKET_TV = ServicesPackageAppmarketTv
  SERVICES_PACKAGE_CAR = ServicesPackageCar
  SERVICES_PACKAGE_TV = ServicesPackageTv
  SERVICES_SIGNATURE = ServicesSignature
  SERVICES_SIGNATURE_CAR = ServicesSignatureCar
  SERVICES_SIGNATURE_TV = ServicesSignatureTv
com/huawei/hms/common/util/AGCUtils = Huawei.Hms.Common.Util.AGCUtils
  <init>()V = .ctor()
  a(Landroid/content/Context;)Ljava/lang/String; = A(Android.Content.Context)
  a(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = A(Android.Content.Context, string)
  b(Landroid/content/Context;)Ljava/lang/String; = B(Android.Content.Context)
  c(Landroid/content/Context;)Z = C(Android.Content.Context)
  getAppId(Landroid/content/Context;)Ljava/lang/String; = GetAppId(Android.Content.Context)
  getCpId(Landroid/content/Context;)Ljava/lang/String; = GetCpId(Android.Content.Context)
com/huawei/hms/support/gentyref/GenericTypeReflector = Huawei.Hms.Support.Gentyref.GenericTypeReflector
  <init>()V = .ctor()
  getType(Ljava/lang/reflect/Type;)Ljava/lang/Class; = GetType(Java.Lang.Reflect.IType)
com/huawei/hms/support/log/common/Base64 = Huawei.Hms.Support.Log.Common.Base64
  <init>()V = .ctor()
  DECODE_TABLE = DecodeTable
  ENCODE_TABLE = EncodeTable
  decode(Ljava/lang/String;)[B = Decode(string)
  encode([B)Ljava/lang/String; = Encode(byte[])
  encode([BI)Ljava/lang/String; = Encode(byte[], int)
  vaildLen(Ljava/lang/String;)I = VaildLen(string)
com/huawei/hms/utils/Checker = Huawei.Hms.Utils.Checker
  <init>()V = .ctor()
  assertHandlerThread(Landroid/os/Handler;)V = AssertHandlerThread(Android.OS.Handler)
  assertHandlerThread(Landroid/os/Handler;Ljava/lang/String;)V = AssertHandlerThread(Android.OS.Handler, string)
  assertNonEmpty(Ljava/lang/String;)V = AssertNonEmpty(string)
  assertNonEmpty(Ljava/lang/String;Ljava/lang/String;)V = AssertNonEmpty(string, string)
  assertNonNull(Ljava/lang/Object;)Ljava/lang/Object; = AssertNonNull(Java.Lang.Object)
  assertNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; = AssertNonNull(Java.Lang.Object, string)
  assertNotUiThread(Ljava/lang/String;)V = AssertNotUiThread(string)
  assertUiThread(Ljava/lang/String;)V = AssertUiThread(string)
  checkNonEmpty(Ljava/lang/String;)Ljava/lang/String; = CheckNonEmpty(string)
  checkNonEmpty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = CheckNonEmpty(string, string)
  checkNonNull(Ljava/lang/Object;)Ljava/lang/Object; = CheckNonNull(Java.Lang.Object)
  checkNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; = CheckNonNull(Java.Lang.Object, string)
  checkNonZero(I)I = CheckNonZero(int)
  checkNonZero(ILjava/lang/String;)I = CheckNonZero(int, string)
  checkNotZero(J)J = CheckNotZero(long)
  checkNotZero(JLjava/lang/String;)J = CheckNotZero(long, string)
com/huawei/hms/utils/FileUtil = Huawei.Hms.Utils.FileUtil
  <init>()V = .ctor()
  a = A
  b = B
  LOCAL_REPORT_FILE = LocalReportFile
  LOCAL_REPORT_FILE_CONFIG = LocalReportFileConfig
  LOCAL_REPORT_FILE_MAX_SIZE = LocalReportFileMaxSize
  verifyHash(Ljava/lang/String;Ljava/io/File;)Z = VerifyHash(string, Java.IO.File)
  writeFile(Ljava/io/File;Ljava/lang/String;J)V = WriteFile(Java.IO.File, string, long)
  writeFileReport(Landroid/content/Context;Ljava/io/File;Ljava/io/File;Ljava/lang/String;JI)V = WriteFileReport(Android.Content.Context, Java.IO.File, Java.IO.File, string, long, int)
com/huawei/hms/utils/HEX = Huawei.Hms.Utils.HEX
  <init>()V = .ctor()
  a = A
  b = B
  a([B[C)[C = A(byte[], char[])
  encodeHex([B)[C = EncodeHex(byte[])
  encodeHex([BZ)[C = EncodeHex(byte[], bool)
  encodeHexString([BZ)Ljava/lang/String; = EncodeHexString(byte[], bool)
com/huawei/hms/utils/HMSPackageManager = Huawei.Hms.Utils.HMSPackageManager
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  g = G
  h = H
  getHMSFingerprint()Ljava/lang/String; = HMSFingerprint
  getHMSPackageName()Ljava/lang/String; = HMSPackageName
  getHMSPackageStates()Lcom/huawei/hms/utils/PackageManagerHelper$PackageStates; = HMSPackageStates
  getHmsVersionCode()I = HmsVersionCode
  a()Landroid/util/Pair; = A()
  a(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z = A(string, string, string)
  b()V = B()
  c()Z = C()
  getInstance(Landroid/content/Context;)Lcom/huawei/hms/utils/HMSPackageManager; = GetInstance(Android.Content.Context)
  hmsVerHigherThan(I)Z = HmsVerHigherThan(int)
  isApkUpdateNecessary(I)Z = IsApkUpdateNecessary(int)
  refresh()V = Refresh()
com/huawei/hms/utils/IOUtils = Huawei.Hms.Utils.IOUtils
  <init>()V = .ctor()
  closeQuietly(Ljava/io/OutputStream;)V = CloseOutputStreamQuietly(System.IO.Stream)
  closeQuietly(Ljava/io/Closeable;)V = CloseQuietly(Java.IO.ICloseable)
  closeQuietly(Ljava/io/InputStream;)V = CloseQuietly(System.IO.Stream)
  closeQuietly(Ljava/io/Reader;)V = CloseQuietly(Java.IO.Reader)
  closeQuietly(Ljava/io/Writer;)V = CloseQuietly(Java.IO.Writer)
  copy(Ljava/io/InputStream;Ljava/io/OutputStream;)J = Copy(System.IO.Stream, System.IO.Stream)
  copy(Ljava/io/InputStream;Ljava/io/OutputStream;[B)J = Copy(System.IO.Stream, System.IO.Stream, byte[])
  toByteArray(Ljava/io/InputStream;)[B = ToByteArray(System.IO.Stream)
  toInputStream([B)Ljava/io/InputStream; = ToInputStream(byte[])
com/huawei/hms/utils/NetWorkUtil = Huawei.Hms.Utils.NetWorkUtil
  <init>()V = .ctor()
  a(Landroid/content/Context;)Landroid/net/NetworkInfo; = A(Android.Content.Context)
  a(Landroid/net/NetworkInfo;)I = A(Android.Net.NetworkInfo)
  getNetworkType(Landroid/content/Context;)I = GetNetworkType(Android.Content.Context)
com/huawei/hms/utils/PackageManagerHelper = Huawei.Hms.Utils.PackageManagerHelper
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  a(Ljava/lang/String;)[B = A(string)
  getPackageSignature(Ljava/lang/String;)Ljava/lang/String; = GetPackageSignature(string)
  getPackageStates(Ljava/lang/String;)Lcom/huawei/hms/utils/PackageManagerHelper$PackageStates; = GetPackageStates(string)
  getPackageVersionCode(Ljava/lang/String;)I = GetPackageVersionCode(string)
  getPackageVersionName(Ljava/lang/String;)Ljava/lang/String; = GetPackageVersionName(string)
  hasProvider(Ljava/lang/String;Ljava/lang/String;)Z = HasProvider(string, string)
  verifyPackageArchive(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z = VerifyPackageArchive(string, string, string)
com/huawei/hms/utils/SHA256 = Huawei.Hms.Utils.SHA256
  <init>()V = .ctor()
  digest([B)[B = Digest(byte[])
  digest(Ljava/io/File;)[B = Digest(Java.IO.File)
com/huawei/hms/utils/StringUtil = Huawei.Hms.Utils.StringUtil
  <init>()V = .ctor()
  addByteForNum(Ljava/lang/String;IC)Ljava/lang/String; = AddByteForNum(string, int, char)
  checkVersion(Ljava/lang/String;)Z = CheckVersion(string)
  convertVersion2Integer(Ljava/lang/String;)I = ConvertVersion2Integer(string)
  objDesc(Ljava/lang/Object;)Ljava/lang/String; = ObjDesc(Java.Lang.Object)
