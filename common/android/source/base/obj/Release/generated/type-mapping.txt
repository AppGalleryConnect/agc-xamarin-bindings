com/huawei/hms/actions/SearchIntents = Huawei.Hms.Actions.SearchIntents
  ACTION_SEARCH = ActionSearch
  EXTRA_QUERY = ExtraQuery
com/huawei/hms/activity/ForegroundBusDelegate = Huawei.Hms.Activity.ForegroundBusDelegate
  <init>()V = .ctor()
  HMS_FOREGROUND_REQ_BODY = HmsForegroundReqBody
  HMS_FOREGROUND_REQ_HEADER = HmsForegroundReqHeader
  HMS_FOREGROUND_REQ_INNER = HmsForegroundReqInner
  HMS_FOREGROUND_RESP_HEADER = HmsForegroundRespHeader
  getRequestCode()I = RequestCode
  onBridgeActivityCreate(Landroid/app/Activity;)V = OnBridgeActivityCreate(Android.App.Activity)
  onBridgeActivityDestroy()V = OnBridgeActivityDestroy()
  onBridgeActivityResult(IILandroid/content/Intent;)Z = OnBridgeActivityResult(int, int, Android.Content.Intent)
  onBridgeConfigurationChanged()V = OnBridgeConfigurationChanged()
  onKeyUp(ILandroid/view/KeyEvent;)V = OnKeyUp(int, Android.Views.KeyEvent)
com/huawei/hms/activity/ForegroundIntentBuilder = Huawei.Hms.Activity.ForegroundIntentBuilder
  <init>(Landroid/app/Activity;)V = .ctor(Android.App.Activity)
  build()Landroid/content/Intent; = Build()
  registerResponseCallback(Ljava/lang/String;Lcom/huawei/hms/activity/internal/BusResponseCallback;)V = RegisterResponseCallback(string, Huawei.Hms.Activity.Internal.IBusResponseCallback)
  setAction(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetAction(string)
  setApiLevel(I)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetApiLevel(int)
  setKitSdkVersion(I)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetKitSdkVersion(int)
  setMinApkVersion(I)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetMinApkVersion(int)
  setRequestBody(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetRequestBody(string)
  setResponseCallback(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetResponseCallback(string)
  setResponseCallback(Ljava/lang/String;Lcom/huawei/hms/activity/internal/BusResponseCallback;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetResponseCallback(string, Huawei.Hms.Activity.Internal.IBusResponseCallback)
  setServiceName(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetServiceName(string)
  setSubAppId(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetSubAppId(string)
  setTransactionId(Ljava/lang/String;)Lcom/huawei/hms/activity/ForegroundIntentBuilder; = SetTransactionId(string)
  unregisterResponseCallback(Ljava/lang/String;)V = UnregisterResponseCallback(string)
com/huawei/hms/activity/internal/BusResponseCallback = Huawei.Hms.Activity.Internal.IBusResponseCallback
  innerError(Landroid/app/Activity;ILjava/lang/String;)Lcom/huawei/hms/activity/internal/BusResponseResult; = InnerError(Android.App.Activity, int, string)
  succeedReturn(Landroid/app/Activity;ILandroid/content/Intent;)Lcom/huawei/hms/activity/internal/BusResponseResult; = SucceedReturn(Android.App.Activity, int, Android.Content.Intent)
com/huawei/hms/activity/internal/BusResponseResult = Huawei.Hms.Activity.Internal.BusResponseResult
  <init>()V = .ctor()
  getCode()I = Code
  setCode(I)V = Code
  getIntent()Landroid/content/Intent; = Intent
  setIntent(Landroid/content/Intent;)V = Intent
com/huawei/hms/activity/internal/ForegroundBusResponseMgr = Huawei.Hms.Activity.Internal.ForegroundBusResponseMgr
  <init>()V = .ctor()
  getInstance()Lcom/huawei/hms/activity/internal/ForegroundBusResponseMgr; = Instance
  get(Ljava/lang/String;)Lcom/huawei/hms/activity/internal/BusResponseCallback; = Get(string)
  registerObserver(Ljava/lang/String;Lcom/huawei/hms/activity/internal/BusResponseCallback;)V = RegisterObserver(string, Huawei.Hms.Activity.Internal.IBusResponseCallback)
  unRegisterObserver(Ljava/lang/String;)V = UnRegisterObserver(string)
com/huawei/hms/activity/internal/ForegroundInnerHeader = Huawei.Hms.Activity.Internal.ForegroundInnerHeader
  <init>()V = .ctor()
  getAction()Ljava/lang/String; = Action
  setAction(Ljava/lang/String;)V = Action
  getApkVersion()I = ApkVersion
  setApkVersion(I)V = ApkVersion
  getResponseCallbackKey()Ljava/lang/String; = ResponseCallbackKey
  setResponseCallbackKey(Ljava/lang/String;)V = ResponseCallbackKey
  fromJson(Ljava/lang/String;)V = FromJson(string)
  toJson()Ljava/lang/String; = ToJson()
com/huawei/hms/adapter/BaseAdapter = Huawei.Hms.Adapter.BaseAdapter
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient)
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;Landroid/app/Activity;)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient, Android.App.Activity)
  baseRequest(Ljava/lang/String;Ljava/lang/String;Landroid/os/Parcelable;Lcom/huawei/hms/adapter/BaseAdapter$BaseCallBack;)V = BaseRequest(string, string, Android.OS.IParcelable, Huawei.Hms.Adapter.BaseAdapter.IBaseCallBack)
com/huawei/hms/adapter/BinderAdapter = Huawei.Hms.Adapter.BinderAdapter
  <init>(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Android.Content.Context, string, string)
  binder(Lcom/huawei/hms/adapter/BinderAdapter$BinderCallBack;)V = Binder(Huawei.Hms.Adapter.BinderAdapter.IBinderCallBack)
  onNullBinding(Landroid/content/ComponentName;)V = OnNullBinding(Android.Content.ComponentName)
  onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V = OnServiceConnected(Android.Content.ComponentName, Android.OS.IBinder)
  onServiceDisconnected(Landroid/content/ComponentName;)V = OnServiceDisconnected(Android.Content.ComponentName)
  unBind()V = UnBind()
com/huawei/hms/adapter/CoreBaseResponse = Huawei.Hms.Adapter.CoreBaseResponse
  <init>()V = .ctor()
  intent = Intent
  pendingIntent = PendingIntent
  getIntent()Landroid/content/Intent; = Intent
  setIntent(Landroid/content/Intent;)V = Intent
  getJsonBody()Ljava/lang/String; = JsonBody
  setJsonBody(Ljava/lang/String;)V = JsonBody
  getJsonHeader()Ljava/lang/String; = JsonHeader
  setJsonHeader(Ljava/lang/String;)V = JsonHeader
  getPendingIntent()Landroid/app/PendingIntent; = PendingIntent
  setPendingIntent(Landroid/app/PendingIntent;)V = PendingIntent
com/huawei/hms/adapter/internal/BaseCode = Huawei.Hms.Adapter.Internal.IBaseCode
  ACTIVITY_NULL = ActivityNull
  DATA_NULL_IN_INTENT = DataNullInIntent
  KPMS_UPDATE_FAILED = KpmsUpdateFailed
  NO_AVAILABLE_LIB_ERROR = NoAvailableLibError
  NO_SOLUTION = NoSolution
  OK = Ok
  PARAM_ERROR = ParamError
  RESULT_NULL = ResultNull
  SOLUTION_GET_RESPONSE_CODE_ERROR = SolutionGetResponseCodeError
  TRANSACTION_IS_NULL = TransactionIsNull
  URI_IS_NULL = UriIsNull
com/huawei/hms/adapter/internal/BinderCode = Huawei.Hms.Adapter.Internal.IBinderCode
  BINDER_SYSTEM_ERROR = BinderSystemError
  OK = Ok
  PARAM_ERROR = ParamError
com/huawei/hms/adapter/internal/ConnectCode = Huawei.Hms.Adapter.Internal.IConnectCode
  CONNECT_RESULT_NULL = ConnectResultNull
  OK = Ok
  PARAM_ERROR = ParamError
com/huawei/hms/api/Api = Huawei.Hms.Api.Api
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Lcom/huawei/hms/api/Api$Options;)V = .ctor(string, Huawei.Hms.Api.Api.Options)
  mConnetctPostList = MConnetctPostList
  getApiName()Ljava/lang/String; = ApiName
  getmConnetctPostList()Ljava/util/List; = GetmConnetctPostList()
  getOptions()Lcom/huawei/hms/api/Api$Options; = GetOptions()
  setmConnetctPostList(Ljava/util/List;)V = SetmConnetctPostList(System.Collections.Generic.IList<Huawei.Hms.Common.Api.IConnectionPostProcessor>)
com/huawei/hms/api/BindingFailedResolution = Huawei.Hms.Api.BindingFailedResolution
  <init>()V = .ctor()
  getActivity()Landroid/app/Activity; = Activity
  getRequestCode()I = RequestCode
  onBridgeActivityCreate(Landroid/app/Activity;)V = OnBridgeActivityCreate(Android.App.Activity)
  onBridgeActivityDestroy()V = OnBridgeActivityDestroy()
  onBridgeActivityResult(IILandroid/content/Intent;)Z = OnBridgeActivityResult(int, int, Android.Content.Intent)
  onBridgeConfigurationChanged()V = OnBridgeConfigurationChanged()
  onKeyUp(ILandroid/view/KeyEvent;)V = OnKeyUp(int, Android.Views.KeyEvent)
  onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V = OnServiceConnected(Android.Content.ComponentName, Android.OS.IBinder)
  onServiceDisconnected(Landroid/content/ComponentName;)V = OnServiceDisconnected(Android.Content.ComponentName)
  onStartResult(Z)V = OnStartResult(bool)
com/huawei/hms/api/CheckUpdatelistener = Huawei.Hms.Api.ICheckUpdatelistener
  onResult(I)V = OnResult(int)
com/huawei/hms/api/ConnectionResult = Huawei.Hms.Api.ConnectionResult
  <init>(I)V = .ctor(int)
  <init>(ILandroid/app/PendingIntent;)V = .ctor(int, Android.App.PendingIntent)
  <init>(ILandroid/app/PendingIntent;Ljava/lang/String;)V = .ctor(int, Android.App.PendingIntent, string)
  API_UNAVAILABLE = ApiUnavailable
  BINDFAIL_RESOLUTION_BACKGROUND = BindfailResolutionBackground
  BINDFAIL_RESOLUTION_REQUIRED = BindfailResolutionRequired
  CANCELED = Canceled
  CREATOR = Creator
  DEVELOPER_ERROR = DeveloperError
  DRIVE_EXTERNAL_STORAGE_REQUIRED = DriveExternalStorageRequired
  INTERNAL_ERROR = InternalError
  INTERRUPTED = Interrupted
  INVALID_ACCOUNT = InvalidAccount
  LICENSE_CHECK_FAILED = LicenseCheckFailed
  NETWORK_ERROR = NetworkError
  RESOLUTION_REQUIRED = ResolutionRequired
  RESTRICTED_PROFILE = RestrictedProfile
  SERVICE_DISABLED = ServiceDisabled
  SERVICE_INVALID = ServiceInvalid
  SERVICE_MISSING = ServiceMissing
  SERVICE_MISSING_PERMISSION = ServiceMissingPermission
  SERVICE_UNSUPPORTED = ServiceUnsupported
  SERVICE_UPDATING = ServiceUpdating
  SERVICE_VERSION_UPDATE_REQUIRED = ServiceVersionUpdateRequired
  SIGN_IN_FAILED = SignInFailed
  SIGN_IN_REQUIRED = SignInRequired
  SUCCESS = Success
  TIMEOUT = Timeout
  getErrorCode()I = ErrorCode
  getErrorMessage()Ljava/lang/String; = ErrorMessage
  hasResolution()Z = HasResolution
  isSuccess()Z = IsSuccess
  getResolution()Landroid/app/PendingIntent; = Resolution
  describeContents()I = DescribeContents()
  startResolutionForResult(Landroid/app/Activity;I)V = StartResolutionForResult(Android.App.Activity, int)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/api/HuaweiApiAvailability = Huawei.Hms.Api.HuaweiApiAvailability
  <init>()V = .ctor()
  ACTIVITY_NAME = ActivityName
  APPID_HMS = AppidHms
  APPID_HMS_TV = AppidHmsTv
  HMS_API_NAME_GAME = HmsApiNameGame
  HMS_API_NAME_IAP = HmsApiNameIap
  HMS_API_NAME_ID = HmsApiNameId
  HMS_API_NAME_OD = HmsApiNameOd
  HMS_API_NAME_PAY = HmsApiNamePay
  HMS_API_NAME_PPS = HmsApiNamePps
  HMS_API_NAME_PUSH = HmsApiNamePush
  HMS_API_NAME_SNS = HmsApiNameSns
  HMS_JSON_VERSION_MIN = HmsJsonVersionMin
  HMS_SDK_VERSION_CODE = HmsSdkVersionCode
  HMS_SDK_VERSION_NAME = HmsSdkVersionName
  HMS_VERSION_CODE_GAME = HmsVersionCodeGame
  HMS_VERSION_CODE_IAP = HmsVersionCodeIap
  HMS_VERSION_CODE_ID = HmsVersionCodeId
  HMS_VERSION_CODE_MIN = HmsVersionCodeMin
  HMS_VERSION_CODE_OD = HmsVersionCodeOd
  HMS_VERSION_CODE_PAY = HmsVersionCodePay
  HMS_VERSION_CODE_PPS = HmsVersionCodePps
  HMS_VERSION_CODE_PUSH = HmsVersionCodePush
  HMS_VERSION_CODE_SNS = HmsVersionCodeSns
  HMS_VERSION_MAX = HmsVersionMax
  HMS_VERSION_MIN = HmsVersionMin
  NOTICE_VERSION_CODE = NoticeVersionCode
  SERVICES_ACTION = ServicesAction
  SERVICES_PACKAGE = ServicesPackage
  SERVICES_PACKAGE_TV = ServicesPackageTv
  SERVICES_SIGNATURE = ServicesSignature
  SERVICES_SIGNATURE_CAR = ServicesSignatureCar
  SERVICES_SIGNATURE_TV = ServicesSignatureTv
  SERVICES_VERSION_CODE = ServicesVersionCode
  getApiMap()Ljava/util/Map; = ApiMap
  getInstance()Lcom/huawei/hms/api/HuaweiApiAvailability; = Instance
  getServicesVersionCode()I = ServicesVersionCode
  setServicesVersionCode(I)V = ServicesVersionCode
  checkApiAccessible(Lcom/huawei/hms/common/api/HuaweiApiCallable;[Lcom/huawei/hms/common/api/HuaweiApiCallable;)Lcom/huawei/hmf/tasks/Task; = CheckApiAccessible(Huawei.Hms.Common.Api.IHuaweiApiCallable, params Huawei.Hms.Common.Api.IHuaweiApiCallable[])
  checkApiAccessible(Lcom/huawei/hms/common/HuaweiApi;[Lcom/huawei/hms/common/HuaweiApi;)Lcom/huawei/hmf/tasks/Task; = CheckApiAccessible(Huawei.Hms.Common.HuaweiApi, params Huawei.Hms.Common.HuaweiApi[])
  getErrorDialog(Landroid/app/Activity;II)Landroid/app/Dialog; = GetErrorDialog(Android.App.Activity, int, int)
  getErrorDialog(Landroid/app/Activity;IILandroid/content/DialogInterface$OnCancelListener;)Landroid/app/Dialog; = GetErrorDialog(Android.App.Activity, int, int, Android.Content.IDialogInterfaceOnCancelListener)
  getErrorString(I)Ljava/lang/String; = GetErrorString(int)
  getErrPendingIntent(Landroid/content/Context;Lcom/huawei/hms/api/ConnectionResult;)Landroid/app/PendingIntent; = GetErrPendingIntent(Android.Content.Context, Huawei.Hms.Api.ConnectionResult)
  getErrPendingIntent(Landroid/content/Context;II)Landroid/app/PendingIntent; = GetErrPendingIntent(Android.Content.Context, int, int)
  getHuaweiServicesReady(Landroid/app/Activity;)Lcom/huawei/hmf/tasks/Task; = GetHuaweiServicesReady(Android.App.Activity)
  getResolveErrorIntent(Landroid/app/Activity;I)Landroid/content/Intent; = GetResolveErrorIntent(Android.App.Activity, int)
  getResolveErrorPendingIntent(Landroid/app/Activity;I)Landroid/app/PendingIntent; = GetResolveErrorPendingIntent(Android.App.Activity, int)
  isHuaweiMobileNoticeAvailable(Landroid/content/Context;)I = IsHuaweiMobileNoticeAvailable(Android.Content.Context)
  isHuaweiMobileServicesAvailable(Landroid/content/Context;)I = IsHuaweiMobileServicesAvailable(Android.Content.Context)
  isHuaweiMobileServicesAvailable(Landroid/content/Context;I)I = IsHuaweiMobileServicesAvailable(Android.Content.Context, int)
  isUserResolvableError(I)Z = IsUserResolvableError(int)
  isUserResolvableError(ILandroid/app/PendingIntent;)Z = IsUserResolvableError(int, Android.App.PendingIntent)
  popupErrNotification(Landroid/content/Context;Lcom/huawei/hms/api/ConnectionResult;)V = PopupErrNotification(Android.Content.Context, Huawei.Hms.Api.ConnectionResult)
  resolveError(Landroid/app/Activity;II)V = ResolveError(Android.App.Activity, int, int)
  resolveError(Landroid/app/Activity;IILandroid/app/PendingIntent;)V = ResolveError(Android.App.Activity, int, int, Android.App.PendingIntent)
  showErrorDialogFragment(Landroid/app/Activity;ILandroid/app/Fragment;ILandroid/content/DialogInterface$OnCancelListener;)Z = ShowErrorDialogFragment(Android.App.Activity, int, Android.App.Fragment, int, Android.Content.IDialogInterfaceOnCancelListener)
  showErrorDialogFragment(Landroid/app/Activity;II)Z = ShowErrorDialogFragment(Android.App.Activity, int, int)
  showErrorDialogFragment(Landroid/app/Activity;IILandroid/content/DialogInterface$OnCancelListener;)Z = ShowErrorDialogFragment(Android.App.Activity, int, int, Android.Content.IDialogInterfaceOnCancelListener)
  showErrorNotification(Landroid/content/Context;I)V = ShowErrorNotification(Android.Content.Context, int)
com/huawei/hms/api/HuaweiApiClient = Huawei.Hms.Api.HuaweiApiClient
  <init>()V = .ctor()
  getApiMap()Ljava/util/Map; = ApiMap
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  getPermissionInfos()Ljava/util/List; = PermissionInfos
  getScopes()Ljava/util/List; = Scopes
  getTopActivity()Landroid/app/Activity; = TopActivity
  checkUpdate(Landroid/app/Activity;Lcom/huawei/hms/api/CheckUpdatelistener;)V = CheckUpdate(Android.App.Activity, Huawei.Hms.Api.ICheckUpdatelistener)
  connect(Landroid/app/Activity;)V = Connect(Android.App.Activity)
  connect(I)V = Connect(int)
  connectForeground()V = ConnectForeground()
  disableLifeCycleManagement(Landroid/app/Activity;)V = DisableLifeCycleManagement(Android.App.Activity)
  discardAndReconnect()Lcom/huawei/hms/support/api/client/PendingResult; = DiscardAndReconnect()
  disconnect()V = Disconnect()
  getConnectionResult(Lcom/huawei/hms/api/Api;)Lcom/huawei/hms/api/ConnectionResult; = GetConnectionResult(Huawei.Hms.Api.Api)
  hasConnectedApi(Lcom/huawei/hms/api/Api;)Z = HasConnectedApi(Huawei.Hms.Api.Api)
  hasConnectionFailureListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)Z = HasConnectionFailureListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  hasConnectionSuccessListener(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)Z = HasConnectionSuccessListener(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  holdUpConnect()Lcom/huawei/hms/api/ConnectionResult; = HoldUpConnect()
  holdUpConnect(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/api/ConnectionResult; = HoldUpConnect(long, Java.Util.Concurrent.TimeUnit)
  onPause(Landroid/app/Activity;)V = OnPause(Android.App.Activity)
  onResume(Landroid/app/Activity;)V = OnResume(Android.App.Activity)
  print(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V = Print(string, Java.IO.FileDescriptor, Java.IO.PrintWriter, string[])
  reconnect()V = Reconnect()
  removeConnectionFailureListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)V = RemoveConnectionFailureListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  removeConnectionSuccessListener(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)V = RemoveConnectionSuccessListener(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  setConnectionCallbacks(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)V = SetConnectionCallbacks(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  setConnectionFailedListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)V = SetConnectionFailedListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  setSubAppInfo(Lcom/huawei/hms/support/api/client/SubAppInfo;)Z = SetSubAppInfo(Huawei.Hms.Support.Api.Client.SubAppInfo)
com/huawei/hms/api/HuaweiApiClientImpl = Huawei.Hms.Api.HuaweiApiClientImpl
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  DEFAULT_ACCOUNT = DefaultAccount
  SIGN_IN_MODE_OPTIONAL = SignInModeOptional
  SIGN_IN_MODE_REQUIRED = SignInModeRequired
  getApiMap()Ljava/util/Map; = ApiMap
  getApiNameList()Ljava/util/List; = ApiNameList
  getAppID()Ljava/lang/String; = AppID
  getContext()Landroid/content/Context; = Context
  getCpID()Ljava/lang/String; = CpID
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  getPackageName()Ljava/lang/String; = PackageName
  getPermissionInfos()Ljava/util/List; = PermissionInfos
  getScopes()Ljava/util/List; = Scopes
  getSessionId()Ljava/lang/String; = SessionId
  getSubAppInfo()Lcom/huawei/hms/support/api/client/SubAppInfo; = SubAppInfo
  getTopActivity()Landroid/app/Activity; = TopActivity
  getTransportName()Ljava/lang/String; = TransportName
  asyncRequest(Landroid/os/Bundle;Ljava/lang/String;ILcom/huawei/hms/support/api/client/ResultCallback;)I = AsyncRequest(Android.OS.Bundle, string, int, Huawei.Hms.Support.Api.Client.IResultCallback)
  checkUpdate(Landroid/app/Activity;Lcom/huawei/hms/api/CheckUpdatelistener;)V = CheckUpdate(Android.App.Activity, Huawei.Hms.Api.ICheckUpdatelistener)
  connect(Landroid/app/Activity;)V = Connect(Android.App.Activity)
  connectForeground()V = ConnectForeground()
  disableLifeCycleManagement(Landroid/app/Activity;)V = DisableLifeCycleManagement(Android.App.Activity)
  discardAndReconnect()Lcom/huawei/hms/support/api/client/PendingResult; = DiscardAndReconnect()
  disconnect()V = Disconnect()
  getConnectionResult(Lcom/huawei/hms/api/Api;)Lcom/huawei/hms/api/ConnectionResult; = GetConnectionResult(Huawei.Hms.Api.Api)
  hasConnectedApi(Lcom/huawei/hms/api/Api;)Z = HasConnectedApi(Huawei.Hms.Api.Api)
  hasConnectionFailureListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)Z = HasConnectionFailureListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  hasConnectionSuccessListener(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)Z = HasConnectionSuccessListener(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  holdUpConnect()Lcom/huawei/hms/api/ConnectionResult; = HoldUpConnect()
  holdUpConnect(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/api/ConnectionResult; = HoldUpConnect(long, Java.Util.Concurrent.TimeUnit)
  innerIsConnected()Z = InnerIsConnected()
  onPause(Landroid/app/Activity;)V = OnPause(Android.App.Activity)
  onResume(Landroid/app/Activity;)V = OnResume(Android.App.Activity)
  onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V = OnServiceConnected(Android.Content.ComponentName, Android.OS.IBinder)
  onServiceDisconnected(Landroid/content/ComponentName;)V = OnServiceDisconnected(Android.Content.ComponentName)
  print(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V = Print(string, Java.IO.FileDescriptor, Java.IO.PrintWriter, string[])
  reconnect()V = Reconnect()
  removeConnectionFailureListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)V = RemoveConnectionFailureListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  removeConnectionSuccessListener(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)V = RemoveConnectionSuccessListener(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  setApiMap(Ljava/util/Map;)V = SetApiMap(System.Collections.Generic.IDictionary<Huawei.Hms.Api.Api, Huawei.Hms.Api.Api.IApiOptions>)
  setAutoLifecycleClientId(I)V = SetAutoLifecycleClientId(int)
  setConnectionCallbacks(Lcom/huawei/hms/api/HuaweiApiClient$ConnectionCallbacks;)V = SetConnectionCallbacks(Huawei.Hms.Api.HuaweiApiClient.IConnectionCallbacks)
  setConnectionFailedListener(Lcom/huawei/hms/api/HuaweiApiClient$OnConnectionFailedListener;)V = SetConnectionFailedListener(Huawei.Hms.Api.HuaweiApiClient.IOnConnectionFailedListener)
  setHasShowNotice(Z)V = SetHasShowNotice(bool)
  setPermissionInfos(Ljava/util/List;)V = SetPermissionInfos(System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.PermissionInfo>)
  setScopes(Ljava/util/List;)V = SetScopes(System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.Scope>)
  setSubAppInfo(Lcom/huawei/hms/support/api/client/SubAppInfo;)Z = SetSubAppInfo(Huawei.Hms.Support.Api.Client.SubAppInfo)
com/huawei/hms/api/HuaweiMobileServicesUtil = Huawei.Hms.Api.HuaweiMobileServicesUtil
  <init>()V = .ctor()
  HMS_ERROR_DIALOG = HmsErrorDialog
  getErrorDialog(ILandroid/app/Activity;I)Landroid/app/Dialog; = GetErrorDialog(int, Android.App.Activity, int)
  getErrorDialog(ILandroid/app/Activity;ILandroid/content/DialogInterface$OnCancelListener;)Landroid/app/Dialog; = GetErrorDialog(int, Android.App.Activity, int, Android.Content.IDialogInterfaceOnCancelListener)
  getErrorString(I)Ljava/lang/String; = GetErrorString(int)
  getOpenSourceSoftwareLicenseInfo(Landroid/content/Context;)Ljava/lang/String; = GetOpenSourceSoftwareLicenseInfo(Android.Content.Context)
  getRemoteContext(Landroid/content/Context;)Landroid/content/Context; = GetRemoteContext(Android.Content.Context)
  getRemoteResource(Landroid/content/Context;)Landroid/content/res/Resources; = GetRemoteResource(Android.Content.Context)
  isHuaweiMobileServicesAvailable(Landroid/content/Context;)I = IsHuaweiMobileServicesAvailable(Android.Content.Context)
  isHuaweiMobileServicesAvailable(Landroid/content/Context;I)I = IsHuaweiMobileServicesAvailable(Android.Content.Context, int)
  isUserRecoverableError(I)Z = IsUserRecoverableError(int)
  popupErrDlgFragment(ILandroid/app/Activity;Landroid/app/Fragment;ILandroid/content/DialogInterface$OnCancelListener;)Z = PopupErrDlgFragment(int, Android.App.Activity, Android.App.Fragment, int, Android.Content.IDialogInterfaceOnCancelListener)
  popupErrDlgFragment(ILandroid/app/Activity;ILandroid/content/DialogInterface$OnCancelListener;)Z = PopupErrDlgFragment(int, Android.App.Activity, int, Android.Content.IDialogInterfaceOnCancelListener)
  setApplication(Landroid/app/Application;)V = SetApplication(Android.App.Application)
  showErrorDialogFragment(ILandroid/app/Activity;I)Z = ShowErrorDialogFragment(int, Android.App.Activity, int)
  showErrorNotification(ILandroid/content/Context;)V = ShowErrorNotification(int, Android.Content.Context)
com/huawei/hms/api/HuaweiServicesNotAvailableException = Huawei.Hms.Api.HuaweiServicesNotAvailableException
  <init>(I)V = .ctor(int)
  errorCode = ErrorCode
com/huawei/hms/api/HuaweiServicesRepairableException = Huawei.Hms.Api.HuaweiServicesRepairableException
  <init>(ILjava/lang/String;Landroid/content/Intent;)V = .ctor(int, string, Android.Content.Intent)
  getConnectionStatusCode()I = ConnectionStatusCode
com/huawei/hms/api/IPCTransport = Huawei.Hms.Api.IPCTransport
  <init>(Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/Class;)V = .ctor(string, Huawei.Hms.Core.Aidl.IMessageEntity, Java.Lang.Class)
  <init>(Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/Class;I)V = .ctor(string, Huawei.Hms.Core.Aidl.IMessageEntity, Java.Lang.Class, int)
  post(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/transport/DatagramTransport$CallBack;)V = Post(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Transport.IDatagramTransportCallBack)
  send(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/transport/DatagramTransport$CallBack;)V = Send(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Transport.IDatagramTransportCallBack)
com/huawei/hms/api/ProtocolNegotiate = Huawei.Hms.Api.ProtocolNegotiate
  <init>()V = .ctor()
  getInstance()Lcom/huawei/hms/api/ProtocolNegotiate; = Instance
  getVersion()I = Version
  negotiate(Ljava/util/List;)I = Negotiate(System.Collections.Generic.IList<Java.Lang.Integer>)
com/huawei/hms/api/ResolutionDelegate = Huawei.Hms.Api.ResolutionDelegate
  <init>()V = .ctor()
  CALLBACK_METHOD = CallbackMethod
  getRequestCode()I = RequestCode
  onBridgeActivityCreate(Landroid/app/Activity;)V = OnBridgeActivityCreate(Android.App.Activity)
  onBridgeActivityDestroy()V = OnBridgeActivityDestroy()
  onBridgeActivityResult(IILandroid/content/Intent;)Z = OnBridgeActivityResult(int, int, Android.Content.Intent)
  onBridgeConfigurationChanged()V = OnBridgeConfigurationChanged()
  onKeyUp(ILandroid/view/KeyEvent;)V = OnKeyUp(int, Android.Views.KeyEvent)
com/huawei/hms/api/UserRecoverableException = Huawei.Hms.Api.UserRecoverableException
  <init>(Ljava/lang/String;Landroid/content/Intent;)V = .ctor(string, Android.Content.Intent)
  getIntent()Landroid/content/Intent; = Intent
com/huawei/hms/common/AccountPicker = Huawei.Hms.Common.AccountPicker
  CHOOSE_ACCOUNT = ChooseAccount
  CUSTOM_THEME_ACCOUNT_CHIPS = CustomThemeAccountChips
  CUSTOM_THEME_GAMES = CustomThemeGames
  CUSTOM_THEME_NONE = CustomThemeNone
  EXTRA_ADD_ACCOUNT_AUTH_TOKEN_TYPE_STRING = ExtraAddAccountAuthTokenTypeString
  EXTRA_ADD_ACCOUNT_OPTIONS_BUNDLE = ExtraAddAccountOptionsBundle
  EXTRA_ADD_ACCOUNT_REQUIRED_FEATURES_STRING_ARRAY = ExtraAddAccountRequiredFeaturesStringArray
  EXTRA_ALLOWABLE_ACCOUNTS_ARRAYLIST = ExtraAllowableAccountsArraylist
  EXTRA_ALLOWABLE_ACCOUNT_TYPES_STRING_ARRAY = ExtraAllowableAccountTypesStringArray
  EXTRA_ALWAYS_PROMPT_FOR_ACCOUNT = ExtraAlwaysPromptForAccount
  EXTRA_DESCRIPTION_TEXT_OVERRIDE = ExtraDescriptionTextOverride
  EXTRA_HOSTED_DOMAIN_FILTER = ExtraHostedDomainFilter
  EXTRA_IS_ACCOUNT_CHIPS_ACCOUNT_PICKER = ExtraIsAccountChipsAccountPicker
  EXTRA_OVERRIDE_CUSTOM_THEME = ExtraOverrideCustomTheme
  EXTRA_OVERRIDE_THEME = ExtraOverrideTheme
  EXTRA_REAL_CLIENT_PACKAGE = ExtraRealClientPackage
  EXTRA_SELECTED_ACCOUNT = ExtraSelectedAccount
  EXTRA_SET_HMS_CORE_ACCOUNT = ExtraSetHmsCoreAccount
  THEME_DEFAULT = ThemeDefault
  THEME_LIGHT = ThemeLight
  newChooseAccountIntent(Landroid/accounts/Account;Ljava/util/ArrayList;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent; = NewChooseAccountIntent(Android.Accounts.Account, System.Collections.Generic.IList<Android.Accounts.Account>, string[], bool, string, string, string[], Android.OS.Bundle)
com/huawei/hms/common/api/AvailabilityException = Huawei.Hms.Common.Api.AvailabilityException
  <init>()V = .ctor()
  getConnectionResult(Lcom/huawei/hms/common/api/HuaweiApiCallable;)Lcom/huawei/hms/api/ConnectionResult; = GetConnectionResult(Huawei.Hms.Common.Api.IHuaweiApiCallable)
  getConnectionResult(Lcom/huawei/hms/common/HuaweiApi;)Lcom/huawei/hms/api/ConnectionResult; = GetConnectionResult(Huawei.Hms.Common.HuaweiApi)
com/huawei/hms/common/api/BooleanResult = Huawei.Hms.Common.Api.BooleanResult
  <init>(Lcom/huawei/hms/support/api/client/Status;Z)V = .ctor(Huawei.Hms.Support.Api.Client.Status, bool)
  getValue()Z = Value
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
com/huawei/hms/common/api/CommonStatusCodes = Huawei.Hms.Common.Api.CommonStatusCodes
  <init>()V = .ctor()
  API_NOT_CONNECTED = ApiNotConnected
  CANCELED = Canceled
  DEVELOPER_ERROR = DeveloperError
  ERROR = Error
  INTERNAL_ERROR = InternalError
  INTERRUPTED = Interrupted
  INVALID_ACCOUNT = InvalidAccount
  NETWORK_ERROR = NetworkError
  RESOLUTION_REQUIRED = ResolutionRequired
  SERVICE_DISABLED = ServiceDisabled
  SERVICE_VERSION_UPDATE_REQUIRED = ServiceVersionUpdateRequired
  SIGN_IN_REQUIRED = SignInRequired
  SUCCESS = Success
  SUCCESS_CACHE = SuccessCache
  TIMEOUT = Timeout
  getStatusCodeString(I)Ljava/lang/String; = GetStatusCodeString(int)
com/huawei/hms/common/api/ConnectionPostProcessor = Huawei.Hms.Common.Api.IConnectionPostProcessor
  run(Lcom/huawei/hms/api/HuaweiApiClient;Ljava/lang/ref/WeakReference;)V = Run(Huawei.Hms.Api.HuaweiApiClient, Java.Lang.Ref.WeakReference)
com/huawei/hms/common/api/HuaweiApiCallable = Huawei.Hms.Common.Api.IHuaweiApiCallable
  getHuaweiApi()Lcom/huawei/hms/common/HuaweiApi; = HuaweiApi
com/huawei/hms/common/api/internal/OptionalPendingResultImpl = Huawei.Hms.Common.Api.Internal.OptionalPendingResultImpl
  <init>(Lcom/huawei/hms/support/api/client/PendingResult;)V = .ctor(Huawei.Hms.Support.Api.Client.PendingResult)
  isCanceled()Z = IsCanceled
  isDone()Z = IsDone
  addStatusListener()V = AddStatusListener()
  await()Lcom/huawei/hms/support/api/client/Result; = Await()
  await(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = Await(long, Java.Util.Concurrent.TimeUnit)
  cancel()V = Cancel()
  get()Lcom/huawei/hms/support/api/client/Result; = Get()
  setResultCallback(Landroid/os/Looper;Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Android.OS.Looper, Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;JLjava/util/concurrent/TimeUnit;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback, long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/common/api/OptionalPendingResult = Huawei.Hms.Common.Api.OptionalPendingResult
  <init>()V = .ctor()
  isDone()Z = IsDone
  get()Lcom/huawei/hms/support/api/client/Result; = Get()
com/huawei/hms/common/api/Releasable = Huawei.Hms.Common.Api.IReleasable
  release()V = Release()
com/huawei/hms/common/api/Response = Huawei.Hms.Common.Api.Response
  <init>()V = .ctor()
  <init>(Lcom/huawei/hms/support/api/client/Result;)V = .ctor(Java.Lang.Object)
  result = Result
  getResult()Lcom/huawei/hms/support/api/client/Result; = Result
  setResult(Lcom/huawei/hms/support/api/client/Result;)V = SetResult(Java.Lang.Object)
com/huawei/hms/common/api/UnsupportedApiCallException = Huawei.Hms.Common.Api.UnsupportedApiCallException
  <init>(Lcom/huawei/hms/common/Feature;)V = .ctor(Huawei.Hms.Common.Feature)
  getMessage()Ljava/lang/String; = Message
com/huawei/hms/common/ApiException = Huawei.Hms.Common.ApiException
  <init>(Lcom/huawei/hms/support/api/client/Status;)V = .ctor(Huawei.Hms.Support.Api.Client.Status)
  mStatus = MStatus
  getStatusCode()I = StatusCode
  getStatusMessage()Ljava/lang/String; = StatusMessage
com/huawei/hms/common/data/AbstractDataBuffer = Huawei.Hms.Common.Data.AbstractDataBuffer
  <init>(Lcom/huawei/hms/common/data/DataHolder;)V = .ctor(Huawei.Hms.Common.Data.DataHolder)
  mDataHolder = MDataHolder
  getCount()I = Count
  isClosed()Z = IsClosed
  getMetadata()Landroid/os/Bundle; = Metadata
  close()V = Close()
  get(I)Ljava/lang/Object; = Get(int)
  iterator()Ljava/util/Iterator; = Iterator()
  release()V = Release()
  singleRefIterator()Ljava/util/Iterator; = SingleRefIterator()
com/huawei/hms/common/data/DataBuffer = Huawei.Hms.Common.Data.IDataBuffer
  getCount()I = Count
  isClosed()Z = IsClosed
  getMetadata()Landroid/os/Bundle; = Metadata
  close()V = Close()
  get(I)Ljava/lang/Object; = Get(int)
  iterator()Ljava/util/Iterator; = Iterator()
  release()V = Release()
  singleRefIterator()Ljava/util/Iterator; = SingleRefIterator()
com/huawei/hms/common/data/DataBufferObserver = Huawei.Hms.Common.Data.IDataBufferObserver
  onDataChanged()V = OnDataChanged()
  onDataRangeChanged(II)V = OnDataRangeChanged(int, int)
  onDataRangeInserted(II)V = OnDataRangeInserted(int, int)
  onDataRangeMoved(III)V = OnDataRangeMoved(int, int, int)
  onDataRangeRemoved(II)V = OnDataRangeRemoved(int, int)
com/huawei/hms/common/data/DataBufferRef = Huawei.Hms.Common.Data.DataBufferRef
  <init>(Lcom/huawei/hms/common/data/DataHolder;I)V = .ctor(Huawei.Hms.Common.Data.DataHolder, int)
  mDataHolder = MDataHolder
  mDataRow = MDataRow
  getDataRow()I = DataRow
  isDataValid()Z = IsDataValid
  copyToBuffer(Ljava/lang/String;Landroid/database/CharArrayBuffer;)V = CopyToBuffer(string, Android.Database.CharArrayBuffer)
  getBoolean(Ljava/lang/String;)Z = GetBoolean(string)
  getByteArray(Ljava/lang/String;)[B = GetByteArray(string)
  getDouble(Ljava/lang/String;)D = GetDouble(string)
  getFloat(Ljava/lang/String;)F = GetFloat(string)
  getInteger(Ljava/lang/String;)I = GetInteger(string)
  getLong(Ljava/lang/String;)J = GetLong(string)
  getString(Ljava/lang/String;)Ljava/lang/String; = GetString(string)
  getWindowIndex(I)V = GetWindowIndex(int)
  hasColumn(Ljava/lang/String;)Z = HasColumn(string)
  hasNull(Ljava/lang/String;)Z = HasNull(string)
  parseUri(Ljava/lang/String;)Landroid/net/Uri; = ParseUri(string)
com/huawei/hms/common/data/DataBufferUtils = Huawei.Hms.Common.Data.DataBufferUtils
  ARGS_BUNDLE = ArgsBundle
  ARGS_COLUMN = ArgsColumn
  ARGS_CURSOR = ArgsCursor
  ARGS_STATUS = ArgsStatus
  ARGS_VERSION = ArgsVersion
  NEXT_PAGE = NextPage
  PREV_PAGE = PrevPage
  freezeAndClose(Lcom/huawei/hms/common/data/DataBuffer;)Ljava/util/ArrayList; = FreezeAndClose(Huawei.Hms.Common.Data.IDataBuffer)
  hasData(Lcom/huawei/hms/common/data/DataBuffer;)Z = HasData(Huawei.Hms.Common.Data.IDataBuffer)
  hasNextPage(Lcom/huawei/hms/common/data/DataBuffer;)Z = HasNextPage(Huawei.Hms.Common.Data.IDataBuffer)
  hasPrevPage(Lcom/huawei/hms/common/data/DataBuffer;)Z = HasPrevPage(Huawei.Hms.Common.Data.IDataBuffer)
com/huawei/hms/common/data/DataHolder = Huawei.Hms.Common.Data.DataHolder
  <init>([Ljava/lang/String;[Landroid/database/CursorWindow;ILandroid/os/Bundle;)V = .ctor(string[], Android.Database.CursorWindow[], int, Android.OS.Bundle)
  <init>(Landroid/database/Cursor;ILandroid/os/Bundle;)V = .ctor(Android.Database.ICursor, int, Android.OS.Bundle)
  CREATOR = Creator
  TYPE_BOOLEAN = TypeBoolean
  TYPE_BYTE_ARRAY = TypeByteArray
  TYPE_DOUBLE = TypeDouble
  TYPE_FLOAT = TypeFloat
  TYPE_INT = TypeInt
  TYPE_LONG = TypeLong
  TYPE_STRING = TypeString
  getCount()I = Count
  isClosed()Z = IsClosed
  getMetadata()Landroid/os/Bundle; = Metadata
  getStatusCode()I = StatusCode
  close()V = Close()
  collectColumsAndCount()V = CollectColumsAndCount()
  copyToBuffer(Ljava/lang/String;IILandroid/database/CharArrayBuffer;)V = CopyToBuffer(string, int, int, Android.Database.CharArrayBuffer)
  empty(I)Lcom/huawei/hms/common/data/DataHolder; = Empty(int)
  getValue(Ljava/lang/String;IILjava/lang/String;)Ljava/lang/Object; = GetValue(string, int, int, string)
  getWindowIndex(I)I = GetWindowIndex(int)
  hasColumn(Ljava/lang/String;)Z = HasColumn(string)
  hasNull(Ljava/lang/String;II)Z = HasNull(string, int, int)
  builder([Ljava/lang/String;)Lcom/huawei/hms/common/data/DataHolder$Builder; = InvokeBuilder(string[])
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/common/data/DataHolderCreator = Huawei.Hms.Common.Data.DataHolderCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/huawei/hms/common/data/DataHolder; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/huawei/hms/common/data/DataHolder; = NewArray(int)
com/huawei/hms/common/data/DBInnerIter = Huawei.Hms.Common.Data.DBInnerIter
  <init>(Lcom/huawei/hms/common/data/DataBuffer;)V = .ctor(Huawei.Hms.Common.Data.IDataBuffer)
  dataBuffer = DataBuffer
  index = Index
  hasNext()Z = HasNext
  next()Ljava/lang/Object; = Next()
  remove()V = Remove()
com/huawei/hms/common/data/Freezable = Huawei.Hms.Common.Data.IFreezable
  isDataValid()Z = IsDataValid
  freeze()Ljava/lang/Object; = Freeze()
com/huawei/hms/common/data/FreezableUtils = Huawei.Hms.Common.Data.FreezableUtils
  <init>()V = .ctor()
  freeze([Lcom/huawei/hms/common/data/Freezable;)Ljava/util/ArrayList; = Freeze(Java.Lang.Object[])
  freeze(Ljava/util/ArrayList;)Ljava/util/ArrayList; = Freeze(System.Collections.IList)
  freezeIterable(Ljava/lang/Iterable;)Ljava/util/ArrayList; = FreezeIterable(Java.Lang.IIterable)
com/huawei/hms/common/data/SingleRefDBInnerIter = Huawei.Hms.Common.Data.SingleRefDBInnerIter
  <init>(Lcom/huawei/hms/common/data/DataBuffer;)V = .ctor(Huawei.Hms.Common.Data.IDataBuffer)
com/huawei/hms/common/ErrDlgFragmentForSupport = Huawei.Hms.Common.ErrDlgFragmentForSupport
  <init>()V = .ctor()
  newInstance(Landroid/app/Dialog;)Lcom/huawei/hms/common/ErrDlgFragmentForSupport; = NewInstance(Android.App.Dialog)
  newInstance(Landroid/app/Dialog;Landroid/content/DialogInterface$OnCancelListener;)Lcom/huawei/hms/common/ErrDlgFragmentForSupport; = NewInstance(Android.App.Dialog, Android.Content.IDialogInterfaceOnCancelListener)
com/huawei/hms/common/ErrorDialogFragment = Huawei.Hms.Common.ErrorDialogFragment
  <init>()V = .ctor()
  newInstance(Landroid/app/Dialog;)Lcom/huawei/hms/common/ErrorDialogFragment; = NewInstance(Android.App.Dialog)
  newInstance(Landroid/app/Dialog;Landroid/content/DialogInterface$OnCancelListener;)Lcom/huawei/hms/common/ErrorDialogFragment; = NewInstance(Android.App.Dialog, Android.Content.IDialogInterfaceOnCancelListener)
com/huawei/hms/common/Feature = Huawei.Hms.Common.Feature
  <init>(Ljava/lang/String;IJ)V = .ctor(string, int, long)
  <init>(Ljava/lang/String;J)V = .ctor(string, long)
  ARGS_NAME = ArgsName
  ARGS_SVC_VER = ArgsSvcVer
  ARGS_VER = ArgsVer
  CREATOR = Creator
  getName()Ljava/lang/String; = Name
  getVersion()J = Version
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/common/FeatureCreator = Huawei.Hms.Common.FeatureCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/huawei/hms/common/Feature; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/huawei/hms/common/Feature; = NewArray(int)
com/huawei/hms/common/HuaweiApi = Huawei.Hms.Common.HuaweiApi
  <init>(Landroid/app/Activity;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;)V = .ctor(Android.App.Activity, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder)
  <init>(Landroid/app/Activity;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;I)V = .ctor(Android.App.Activity, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder, int)
  <init>(Landroid/app/Activity;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;ILjava/lang/String;)V = .ctor(Android.App.Activity, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder, int, string)
  <init>(Landroid/content/Context;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;)V = .ctor(Android.Content.Context, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder)
  <init>(Landroid/content/Context;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;I)V = .ctor(Android.Content.Context, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder, int)
  <init>(Landroid/content/Context;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Lcom/huawei/hms/common/internal/AbstractClientBuilder;ILjava/lang/String;)V = .ctor(Android.Content.Context, Huawei.Hms.Api.Api, Java.Lang.Object, Huawei.Hms.Common.Internal.AbstractClientBuilder, int, string)
  getActivity()Landroid/app/Activity; = Activity
  getApiLevel()I = ApiLevel
  setApiLevel(I)V = ApiLevel
  getAppID()Ljava/lang/String; = AppID
  getClientSetting()Lcom/huawei/hms/common/internal/ClientSettings; = ClientSetting
  getConnectionManagerKey()Lcom/huawei/hms/common/internal/ConnectionManagerKey; = ConnectionManagerKey
  getContext()Landroid/content/Context; = Context
  getKitSdkVersion()I = KitSdkVersion
  setKitSdkVersion(I)V = KitSdkVersion
  getOption()Lcom/huawei/hms/api/Api$ApiOptions; = Option
  getScopes()Ljava/util/List; = Scopes
  getSubAppID()Ljava/lang/String; = SubAppID
  disconnectService()Lcom/huawei/hmf/tasks/Task; = DisconnectService()
  doWrite(Lcom/huawei/hms/common/internal/TaskApiCall;)Lcom/huawei/hmf/tasks/Task; = DoWrite(Huawei.Hms.Common.Internal.TaskApiCall)
  getClient(Landroid/os/Looper;Lcom/huawei/hms/common/internal/HuaweiApiManager$ConnectionManager;)Lcom/huawei/hms/common/internal/AnyClient; = GetClient(Android.OS.Looper, Huawei.Hms.Common.Internal.HuaweiApiManager.ConnectionManager)
  setInnerHms()V = SetInnerHms()
  setSubAppId(Ljava/lang/String;)V = SetSubAppId(string)
  setSubAppInfo(Lcom/huawei/hms/support/api/client/SubAppInfo;)Z = SetSubAppInfo(Huawei.Hms.Support.Api.Client.SubAppInfo)
com/huawei/hms/common/HuaweiApiInterface = Huawei.Hms.Common.IHuaweiApiInterface
  setInnerHms()V = SetInnerHms()
  setSubAppId(Ljava/lang/String;)V = SetSubAppId(string)
com/huawei/hms/common/internal/AbstractClientBuilder = Huawei.Hms.Common.Internal.AbstractClientBuilder
  <init>()V = .ctor()
com/huawei/hms/common/internal/AnyClient = Huawei.Hms.Common.Internal.IAnyClient
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  getSessionId()Ljava/lang/String; = SessionId
  connect(I)V = Connect(int)
  connect(IZ)V = Connect(int, bool)
  disconnect()V = Disconnect()
  post(Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/String;Lcom/huawei/hms/common/internal/AnyClient$CallBack;)V = Post(Huawei.Hms.Core.Aidl.IMessageEntity, string, Huawei.Hms.Common.Internal.IAnyClientCallBack)
com/huawei/hms/common/internal/Asserter = Huawei.Hms.Common.Internal.Asserter
  checkNotNull(Ljava/lang/Object;)V = CheckNotNull(Java.Lang.Object)
  checkNotNull(Ljava/lang/Object;Ljava/lang/Object;)V = CheckNotNull(Java.Lang.Object, Java.Lang.Object)
  checkNull(Ljava/lang/Object;)V = CheckNull(Java.Lang.Object)
  checkState(Z)V = CheckState(bool)
  checkState(ZLjava/lang/Object;)V = CheckState(bool, Java.Lang.Object)
com/huawei/hms/common/internal/AutoLifecycleFragment = Huawei.Hms.Common.Internal.AutoLifecycleFragment
  <init>()V = .ctor()
  getInstance(Landroid/app/Activity;)Lcom/huawei/hms/common/internal/AutoLifecycleFragment; = GetInstance(Android.App.Activity)
  startAutoMange(ILcom/huawei/hms/api/HuaweiApiClient;)V = StartAutoMange(int, Huawei.Hms.Api.HuaweiApiClient)
  stopAutoManage(I)V = StopAutoManage(int)
com/huawei/hms/common/internal/BaseHmsClient = Huawei.Hms.Common.Internal.BaseHmsClient
  <init>(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)V = .ctor(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
  sessionId = SessionId
  getApiNameList()Ljava/util/List; = ApiNameList
  getAppID()Ljava/lang/String; = AppID
  getClientSettings()Lcom/huawei/hms/common/internal/ClientSettings; = ClientSettings
  getContext()Landroid/content/Context; = Context
  getCpID()Ljava/lang/String; = CpID
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  getMinApkVersion()I = MinApkVersion
  getPackageName()Ljava/lang/String; = PackageName
  getServiceAction()Ljava/lang/String; = ServiceAction
  getSessionId()Ljava/lang/String; = SessionId
  getSubAppInfo()Lcom/huawei/hms/support/api/client/SubAppInfo; = SubAppInfo
  getTransportName()Ljava/lang/String; = TransportName
  checkConnected()V = CheckConnected()
  connect(I)V = Connect(int)
  connect(IZ)V = Connect(int, bool)
  connectionConnected()V = ConnectionConnected()
  disconnect()V = Disconnect()
  onConnecting()V = OnConnecting()
com/huawei/hms/common/internal/BindResolveClients = Huawei.Hms.Common.Internal.BindResolveClients
  getInstance()Lcom/huawei/hms/common/internal/BindResolveClients; = Instance
  notifyClientReconnect()V = NotifyClientReconnect()
  unRegisterAll()V = UnRegisterAll()
com/huawei/hms/common/internal/ClientSettings = Huawei.Hms.Common.Internal.ClientSettings
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/util/List;)V = .ctor(string, string, System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.Scope>, string, System.Collections.Generic.IList<string>)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/util/List;Lcom/huawei/hms/support/api/client/SubAppInfo;)V = .ctor(string, string, System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.Scope>, string, System.Collections.Generic.IList<string>, Huawei.Hms.Support.Api.Client.SubAppInfo)
  getApiName()Ljava/util/List; = ApiName
  setApiName(Ljava/util/List;)V = ApiName
  getAppID()Ljava/lang/String; = AppID
  setAppID(Ljava/lang/String;)V = AppID
  getClientClassName()Ljava/lang/String; = ClientClassName
  setClientClassName(Ljava/lang/String;)V = ClientClassName
  getClientPackageName()Ljava/lang/String; = ClientPackageName
  setClientPackageName(Ljava/lang/String;)V = ClientPackageName
  getCpActivity()Landroid/app/Activity; = CpActivity
  setCpActivity(Landroid/app/Activity;)V = CpActivity
  getCpID()Ljava/lang/String; = CpID
  setCpID(Ljava/lang/String;)V = CpID
  getInnerHmsPkg()Ljava/lang/String; = InnerHmsPkg
  setInnerHmsPkg(Ljava/lang/String;)V = InnerHmsPkg
  isHasActivity()Z = IsHasActivity
  getScopes()Ljava/util/List; = Scopes
  setScopes(Ljava/util/List;)V = Scopes
  getSubAppID()Lcom/huawei/hms/support/api/client/SubAppInfo; = SubAppID
  setSubAppId(Lcom/huawei/hms/support/api/client/SubAppInfo;)V = SetSubAppId(Huawei.Hms.Support.Api.Client.SubAppInfo)
com/huawei/hms/common/internal/ConnectionErrorMessages = Huawei.Hms.Common.Internal.ConnectionErrorMessages
  <init>()V = .ctor()
  getErrorDialogButtonMessage(Landroid/app/Activity;I)Ljava/lang/String; = GetErrorDialogButtonMessage(Android.App.Activity, int)
  getErrorMessage(Landroid/app/Activity;I)Ljava/lang/String; = GetErrorMessage(Android.App.Activity, int)
  getErrorTitle(Landroid/app/Activity;I)Ljava/lang/String; = GetErrorTitle(Android.App.Activity, int)
com/huawei/hms/common/internal/ConnectionManagerKey = Huawei.Hms.Common.Internal.ConnectionManagerKey
  createConnectionManagerKey(Landroid/content/Context;Lcom/huawei/hms/api/Api;Lcom/huawei/hms/api/Api$ApiOptions;Ljava/lang/String;)Lcom/huawei/hms/common/internal/ConnectionManagerKey; = CreateConnectionManagerKey(Android.Content.Context, Huawei.Hms.Api.Api, Java.Lang.Object, string)
  createConnectionManagerKey(Lcom/huawei/hms/api/Api;Ljava/lang/String;)Lcom/huawei/hms/common/internal/ConnectionManagerKey; = CreateConnectionManagerKey(Huawei.Hms.Api.Api, string)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
com/huawei/hms/common/internal/DialogRedirect = Huawei.Hms.Common.Internal.DialogRedirect
  <init>()V = .ctor()
  getInstance(Landroid/app/Activity;Landroid/content/Intent;I)Lcom/huawei/hms/common/internal/DialogRedirect; = GetInstance(Android.App.Activity, Android.Content.Intent, int)
  onClick(Landroid/content/DialogInterface;I)V = OnClick(Android.Content.IDialogInterface, int)
  redirect()V = Redirect()
com/huawei/hms/common/internal/DialogRedirectImpl = Huawei.Hms.Common.Internal.DialogRedirectImpl
  redirect()V = Redirect()
com/huawei/hms/common/internal/HmsClient = Huawei.Hms.Common.Internal.HmsClient
  <init>(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)V = .ctor(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
  post(Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/String;Lcom/huawei/hms/common/internal/AnyClient$CallBack;)V = Post(Huawei.Hms.Core.Aidl.IMessageEntity, string, Huawei.Hms.Common.Internal.IAnyClientCallBack)
  updateSessionId(Ljava/lang/String;)V = UpdateSessionId(string)
com/huawei/hms/common/internal/HuaweiApiManager = Huawei.Hms.Common.Internal.HuaweiApiManager
  disconnectService(Lcom/huawei/hms/common/HuaweiApi;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = DisconnectService(Huawei.Hms.Common.HuaweiApi, Huawei.Hmf.Tasks.TaskCompletionSource)
  getInstance(Landroid/content/Context;)Lcom/huawei/hms/common/internal/HuaweiApiManager; = GetInstance(Android.Content.Context)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  sendRequest(Lcom/huawei/hms/common/HuaweiApi;Lcom/huawei/hms/common/internal/TaskApiCall;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = SendRequest(Huawei.Hms.Common.HuaweiApi, Huawei.Hms.Common.Internal.TaskApiCall, Huawei.Hmf.Tasks.TaskCompletionSource)
com/huawei/hms/common/internal/ReflectedParcelable = Huawei.Hms.Common.Internal.IReflectedParcelable
com/huawei/hms/common/internal/RequestHeader = Huawei.Hms.Common.Internal.RequestHeader
  <init>()V = .ctor()
  getActualAppID()Ljava/lang/String; = ActualAppID
  getApiLevel()I = ApiLevel
  setApiLevel(I)V = ApiLevel
  getApiName()Ljava/lang/String; = ApiName
  setApiName(Ljava/lang/String;)V = ApiName
  getAppID()Ljava/lang/String; = AppID
  setAppID(Ljava/lang/String;)V = AppID
  getKitSdkVersion()I = KitSdkVersion
  setKitSdkVersion(I)V = KitSdkVersion
  getParcelable()Landroid/os/Parcelable; = Parcelable
  setParcelable(Landroid/os/Parcelable;)V = Parcelable
  getPkgName()Ljava/lang/String; = PkgName
  setPkgName(Ljava/lang/String;)V = PkgName
  getSdkVersion()I = SdkVersion
  setSdkVersion(I)V = SdkVersion
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getSrvName()Ljava/lang/String; = SrvName
  setSrvName(Ljava/lang/String;)V = SrvName
  getTransactionId()Ljava/lang/String; = TransactionId
  setTransactionId(Ljava/lang/String;)V = TransactionId
  getVersion()Ljava/lang/String; = Version
  setVersion(Ljava/lang/String;)V = Version
  fromJson(Ljava/lang/String;)Z = FromJson(string)
  toJson()Ljava/lang/String; = ToJson()
com/huawei/hms/common/internal/ResolveClientBean = Huawei.Hms.Common.Internal.ResolveClientBean
  <init>(Lcom/huawei/hms/common/internal/AnyClient;I)V = .ctor(Huawei.Hms.Common.Internal.IAnyClient, int)
  getClient()Lcom/huawei/hms/common/internal/AnyClient; = Client
  clientReconnect()V = ClientReconnect()
com/huawei/hms/common/internal/ResponseErrorCode = Huawei.Hms.Common.Internal.IResponseErrorCode
  getErrorCode()I = ErrorCode
  getErrorReason()Ljava/lang/String; = ErrorReason
  getParcelable()Landroid/os/Parcelable; = Parcelable
  getResolution()Ljava/lang/String; = Resolution
  getStatusCode()I = StatusCode
  getTransactionId()Ljava/lang/String; = TransactionId
com/huawei/hms/common/internal/ResponseHeader = Huawei.Hms.Common.Internal.ResponseHeader
  <init>()V = .ctor()
  <init>(IILjava/lang/String;)V = .ctor(int, int, string)
  getActualAppID()Ljava/lang/String; = ActualAppID
  getApiName()Ljava/lang/String; = ApiName
  setApiName(Ljava/lang/String;)V = ApiName
  getAppID()Ljava/lang/String; = AppID
  setAppID(Ljava/lang/String;)V = AppID
  getErrorCode()I = ErrorCode
  setErrorCode(I)V = ErrorCode
  getErrorReason()Ljava/lang/String; = ErrorReason
  setErrorReason(Ljava/lang/String;)V = ErrorReason
  isSuccess()Z = IsSuccess
  getParcelable()Landroid/os/Parcelable; = Parcelable
  setParcelable(Landroid/os/Parcelable;)V = Parcelable
  getPkgName()Ljava/lang/String; = PkgName
  setPkgName(Ljava/lang/String;)V = PkgName
  getResolution()Ljava/lang/String; = Resolution
  setResolution(Ljava/lang/String;)V = Resolution
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  getSrvName()Ljava/lang/String; = SrvName
  setSrvName(Ljava/lang/String;)V = SrvName
  getStatusCode()I = StatusCode
  setStatusCode(I)V = StatusCode
  getTransactionId()Ljava/lang/String; = TransactionId
  setTransactionId(Ljava/lang/String;)V = TransactionId
  fromJson(Ljava/lang/String;)Z = FromJson(string)
  toJson()Ljava/lang/String; = ToJson()
com/huawei/hms/common/internal/ResponseWrap = Huawei.Hms.Common.Internal.ResponseWrap
  <init>(Lcom/huawei/hms/common/internal/ResponseHeader;)V = .ctor(Huawei.Hms.Common.Internal.ResponseHeader)
  getBody()Ljava/lang/String; = Body
  setBody(Ljava/lang/String;)V = Body
  getResponseHeader()Lcom/huawei/hms/common/internal/ResponseHeader; = ResponseHeader
  setResponseHeader(Lcom/huawei/hms/common/internal/ResponseHeader;)V = ResponseHeader
  fromJson(Ljava/lang/String;)Z = FromJson(string)
  toJson()Ljava/lang/String; = ToJson()
com/huawei/hms/common/internal/safeparcel/AbstractSafeParcelable = Huawei.Hms.Common.Internal.Safeparcel.AbstractSafeParcelable
  <init>()V = .ctor()
  describeContents()I = DescribeContents()
com/huawei/hms/common/internal/safeparcel/SafeParcelable = Huawei.Hms.Common.Internal.Safeparcel.ISafeParcelable
  NULL = Null
com/huawei/hms/common/internal/safeparcel/SafeParcelableSerializer = Huawei.Hms.Common.Internal.Safeparcel.SafeParcelableSerializer
  <init>()V = .ctor()
  deserializeFromBytes([BLandroid/os/Parcelable$Creator;)Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable; = DeserializeFromBytes(byte[], Android.OS.IParcelableCreator)
  deserializeFromIntentExtra(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Parcelable$Creator;)Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable; = DeserializeFromIntentExtra(Android.Content.Intent, string, Android.OS.IParcelableCreator)
  deserializeFromString(Ljava/lang/String;Landroid/os/Parcelable$Creator;)Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable; = DeserializeFromString(string, Android.OS.IParcelableCreator)
  deserializeIterableFromBundle(Landroid/os/Bundle;Ljava/lang/String;Landroid/os/Parcelable$Creator;)Ljava/util/ArrayList; = DeserializeIterableFromBundle(Android.OS.Bundle, string, Android.OS.IParcelableCreator)
  deserializeIterableFromIntentExtra(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Parcelable$Creator;)Ljava/util/ArrayList; = DeserializeIterableFromIntentExtra(Android.Content.Intent, string, Android.OS.IParcelableCreator)
  serializeIterableToBundle(Ljava/lang/Iterable;Landroid/os/Bundle;Ljava/lang/String;)V = SerializeIterableToBundle(Java.Lang.IIterable, Android.OS.Bundle, string)
  serializeIterableToIntentExtra(Ljava/lang/Iterable;Landroid/content/Intent;Ljava/lang/String;)V = SerializeIterableToIntentExtra(Java.Lang.IIterable, Android.Content.Intent, string)
  serializeToBytes(Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable;)[B = SerializeToBytes(Java.Lang.Object)
  serializeToIntentExtra(Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable;Landroid/content/Intent;Ljava/lang/String;)V = SerializeToIntentExtra(Java.Lang.Object, Android.Content.Intent, string)
  serializeToString(Lcom/huawei/hms/common/internal/safeparcel/SafeParcelable;)Ljava/lang/String; = SerializeToString(Java.Lang.Object)
com/huawei/hms/common/internal/safeparcel/SafeParcelReader = Huawei.Hms.Common.Internal.Safeparcel.SafeParcelReader
  createBigDecimal(Landroid/os/Parcel;I)Ljava/math/BigDecimal; = CreateBigDecimal(Android.OS.Parcel, int)
  createBigDecimalArray(Landroid/os/Parcel;I)[Ljava/math/BigDecimal; = CreateBigDecimalArray(Android.OS.Parcel, int)
  createBigInteger(Landroid/os/Parcel;I)Ljava/math/BigInteger; = CreateBigInteger(Android.OS.Parcel, int)
  createBigIntegerArray(Landroid/os/Parcel;I)[Ljava/math/BigInteger; = CreateBigIntegerArray(Android.OS.Parcel, int)
  createBooleanArray(Landroid/os/Parcel;I)[Z = CreateBooleanArray(Android.OS.Parcel, int)
  createBooleanList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateBooleanList(Android.OS.Parcel, int)
  createBundle(Landroid/os/Parcel;I)Landroid/os/Bundle; = CreateBundle(Android.OS.Parcel, int)
  createByteArray(Landroid/os/Parcel;I)[B = CreateByteArray(Android.OS.Parcel, int)
  createByteArrayArray(Landroid/os/Parcel;I)[[B = CreateByteArrayArray(Android.OS.Parcel, int)
  createByteArraySparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateByteArraySparseArray(Android.OS.Parcel, int)
  createCharArray(Landroid/os/Parcel;I)[C = CreateCharArray(Android.OS.Parcel, int)
  createDoubleArray(Landroid/os/Parcel;I)[D = CreateDoubleArray(Android.OS.Parcel, int)
  createDoubleList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateDoubleList(Android.OS.Parcel, int)
  createDoubleSparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateDoubleSparseArray(Android.OS.Parcel, int)
  createFloatArray(Landroid/os/Parcel;I)[F = CreateFloatArray(Android.OS.Parcel, int)
  createFloatList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateFloatList(Android.OS.Parcel, int)
  createFloatSparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateFloatSparseArray(Android.OS.Parcel, int)
  createIBinderArray(Landroid/os/Parcel;I)[Landroid/os/IBinder; = CreateIBinderArray(Android.OS.Parcel, int)
  createIBinderList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateIBinderList(Android.OS.Parcel, int)
  createIBinderSparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateIBinderSparseArray(Android.OS.Parcel, int)
  createIntArray(Landroid/os/Parcel;I)[I = CreateIntArray(Android.OS.Parcel, int)
  createIntegerList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateIntegerList(Android.OS.Parcel, int)
  createLongArray(Landroid/os/Parcel;I)[J = CreateLongArray(Android.OS.Parcel, int)
  createLongList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateLongList(Android.OS.Parcel, int)
  createParcel(Landroid/os/Parcel;I)Landroid/os/Parcel; = CreateParcel(Android.OS.Parcel, int)
  createParcelable(Landroid/os/Parcel;ILandroid/os/Parcelable$Creator;)Landroid/os/Parcelable; = CreateParcelable(Android.OS.Parcel, int, Android.OS.IParcelableCreator)
  createParcelArray(Landroid/os/Parcel;I)[Landroid/os/Parcel; = CreateParcelArray(Android.OS.Parcel, int)
  createParcelList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateParcelList(Android.OS.Parcel, int)
  createParcelSparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateParcelSparseArray(Android.OS.Parcel, int)
  createSparseBooleanArray(Landroid/os/Parcel;I)Landroid/util/SparseBooleanArray; = CreateSparseBooleanArray(Android.OS.Parcel, int)
  createSparseIntArray(Landroid/os/Parcel;I)Landroid/util/SparseIntArray; = CreateSparseIntArray(Android.OS.Parcel, int)
  createSparseLongArray(Landroid/os/Parcel;I)Landroid/util/SparseLongArray; = CreateSparseLongArray(Android.OS.Parcel, int)
  createString(Landroid/os/Parcel;I)Ljava/lang/String; = CreateString(Android.OS.Parcel, int)
  createStringArray(Landroid/os/Parcel;I)[Ljava/lang/String; = CreateStringArray(Android.OS.Parcel, int)
  createStringList(Landroid/os/Parcel;I)Ljava/util/ArrayList; = CreateStringList(Android.OS.Parcel, int)
  createStringSparseArray(Landroid/os/Parcel;I)Landroid/util/SparseArray; = CreateStringSparseArray(Android.OS.Parcel, int)
  createTypedArray(Landroid/os/Parcel;ILandroid/os/Parcelable$Creator;)[Ljava/lang/Object; = CreateTypedArray(Android.OS.Parcel, int, Android.OS.IParcelableCreator)
  createTypedList(Landroid/os/Parcel;ILandroid/os/Parcelable$Creator;)Ljava/util/ArrayList; = CreateTypedList(Android.OS.Parcel, int, Android.OS.IParcelableCreator)
  createTypedSparseArray(Landroid/os/Parcel;ILandroid/os/Parcelable$Creator;)Landroid/util/SparseArray; = CreateTypedSparseArray(Android.OS.Parcel, int, Android.OS.IParcelableCreator)
  ensureAtEnd(Landroid/os/Parcel;I)V = EnsureAtEnd(Android.OS.Parcel, int)
  getFieldId(I)I = GetFieldId(int)
  readBoolean(Landroid/os/Parcel;I)Z = ReadBoolean(Android.OS.Parcel, int)
  readBooleanObject(Landroid/os/Parcel;I)Ljava/lang/Boolean; = ReadBooleanObject(Android.OS.Parcel, int)
  readByte(Landroid/os/Parcel;I)B = ReadByte(Android.OS.Parcel, int)
  readChar(Landroid/os/Parcel;I)C = ReadChar(Android.OS.Parcel, int)
  readDouble(Landroid/os/Parcel;I)D = ReadDouble(Android.OS.Parcel, int)
  readDoubleObject(Landroid/os/Parcel;I)Ljava/lang/Double; = ReadDoubleObject(Android.OS.Parcel, int)
  readFloat(Landroid/os/Parcel;I)F = ReadFloat(Android.OS.Parcel, int)
  readFloatObject(Landroid/os/Parcel;I)Ljava/lang/Float; = ReadFloatObject(Android.OS.Parcel, int)
  readHeader(Landroid/os/Parcel;)I = ReadHeader(Android.OS.Parcel)
  readIBinder(Landroid/os/Parcel;I)Landroid/os/IBinder; = ReadIBinder(Android.OS.Parcel, int)
  readInt(Landroid/os/Parcel;I)I = ReadInt(Android.OS.Parcel, int)
  readIntegerObject(Landroid/os/Parcel;I)Ljava/lang/Integer; = ReadIntegerObject(Android.OS.Parcel, int)
  readList(Landroid/os/Parcel;ILjava/util/List;Ljava/lang/ClassLoader;)V = ReadList(Android.OS.Parcel, int, System.Collections.IList, Java.Lang.ClassLoader)
  readLong(Landroid/os/Parcel;I)J = ReadLong(Android.OS.Parcel, int)
  readLongObject(Landroid/os/Parcel;I)Ljava/lang/Long; = ReadLongObject(Android.OS.Parcel, int)
  readShort(Landroid/os/Parcel;I)S = ReadShort(Android.OS.Parcel, int)
  readSize(Landroid/os/Parcel;I)I = ReadSize(Android.OS.Parcel, int)
  skipUnknownField(Landroid/os/Parcel;I)V = SkipUnknownField(Android.OS.Parcel, int)
  validateObjectHeader(Landroid/os/Parcel;)I = ValidateObjectHeader(Android.OS.Parcel)
com/huawei/hms/common/internal/safeparcel/SafeParcelWriter = Huawei.Hms.Common.Internal.Safeparcel.SafeParcelWriter
  beginObjectHeader(Landroid/os/Parcel;)I = BeginObjectHeader(Android.OS.Parcel)
  finishObjectHeader(Landroid/os/Parcel;I)V = FinishObjectHeader(Android.OS.Parcel, int)
  writeBigDecimal(Landroid/os/Parcel;ILjava/math/BigDecimal;Z)V = WriteBigDecimal(Android.OS.Parcel, int, Java.Math.BigDecimal, bool)
  writeBigDecimalArray(Landroid/os/Parcel;I[Ljava/math/BigDecimal;Z)V = WriteBigDecimalArray(Android.OS.Parcel, int, Java.Math.BigDecimal[], bool)
  writeBigInteger(Landroid/os/Parcel;ILjava/math/BigInteger;Z)V = WriteBigInteger(Android.OS.Parcel, int, Java.Math.BigInteger, bool)
  writeBigIntegerArray(Landroid/os/Parcel;I[Ljava/math/BigInteger;Z)V = WriteBigIntegerArray(Android.OS.Parcel, int, Java.Math.BigInteger[], bool)
  writeBoolean(Landroid/os/Parcel;IZ)V = WriteBoolean(Android.OS.Parcel, int, bool)
  writeBooleanArray(Landroid/os/Parcel;I[ZZ)V = WriteBooleanArray(Android.OS.Parcel, int, bool[], bool)
  writeBooleanList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteBooleanList(Android.OS.Parcel, int, System.Collections.Generic.IList<Java.Lang.Boolean>, bool)
  writeBooleanObject(Landroid/os/Parcel;ILjava/lang/Boolean;Z)V = WriteBooleanObject(Android.OS.Parcel, int, Java.Lang.Boolean, bool)
  writeBundle(Landroid/os/Parcel;ILandroid/os/Bundle;Z)V = WriteBundle(Android.OS.Parcel, int, Android.OS.Bundle, bool)
  writeByte(Landroid/os/Parcel;IB)V = WriteByte(Android.OS.Parcel, int, sbyte)
  writeByteArray(Landroid/os/Parcel;I[BZ)V = WriteByteArray(Android.OS.Parcel, int, byte[], bool)
  writeByteArrayArray(Landroid/os/Parcel;I[[BZ)V = WriteByteArrayArray(Android.OS.Parcel, int, byte[][], bool)
  writeByteArraySparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteByteArraySparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeChar(Landroid/os/Parcel;IC)V = WriteChar(Android.OS.Parcel, int, char)
  writeCharArray(Landroid/os/Parcel;I[CZ)V = WriteCharArray(Android.OS.Parcel, int, char[], bool)
  writeDouble(Landroid/os/Parcel;ID)V = WriteDouble(Android.OS.Parcel, int, double)
  writeDoubleArray(Landroid/os/Parcel;I[DZ)V = WriteDoubleArray(Android.OS.Parcel, int, double[], bool)
  writeDoubleList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteDoubleList(Android.OS.Parcel, int, System.Collections.Generic.IList<Java.Lang.Double>, bool)
  writeDoubleObject(Landroid/os/Parcel;ILjava/lang/Double;Z)V = WriteDoubleObject(Android.OS.Parcel, int, Java.Lang.Double, bool)
  writeDoubleSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteDoubleSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeFloat(Landroid/os/Parcel;IF)V = WriteFloat(Android.OS.Parcel, int, float)
  writeFloatArray(Landroid/os/Parcel;I[FZ)V = WriteFloatArray(Android.OS.Parcel, int, float[], bool)
  writeFloatList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteFloatList(Android.OS.Parcel, int, System.Collections.Generic.IList<Java.Lang.Float>, bool)
  writeFloatObject(Landroid/os/Parcel;ILjava/lang/Float;Z)V = WriteFloatObject(Android.OS.Parcel, int, Java.Lang.Float, bool)
  writeFloatSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteFloatSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeIBinder(Landroid/os/Parcel;ILandroid/os/IBinder;Z)V = WriteIBinder(Android.OS.Parcel, int, Android.OS.IBinder, bool)
  writeIBinderArray(Landroid/os/Parcel;I[Landroid/os/IBinder;Z)V = WriteIBinderArray(Android.OS.Parcel, int, Android.OS.IBinder[], bool)
  writeIBinderList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteIBinderList(Android.OS.Parcel, int, System.Collections.Generic.IList<Android.OS.IBinder>, bool)
  writeIBinderSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteIBinderSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeInt(Landroid/os/Parcel;II)V = WriteInt(Android.OS.Parcel, int, int)
  writeIntArray(Landroid/os/Parcel;I[IZ)V = WriteIntArray(Android.OS.Parcel, int, int[], bool)
  writeIntegerList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteIntegerList(Android.OS.Parcel, int, System.Collections.Generic.IList<Java.Lang.Integer>, bool)
  writeIntegerObject(Landroid/os/Parcel;ILjava/lang/Integer;Z)V = WriteIntegerObject(Android.OS.Parcel, int, Java.Lang.Integer, bool)
  writeList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteList(Android.OS.Parcel, int, System.Collections.IList, bool)
  writeLong(Landroid/os/Parcel;IJ)V = WriteLong(Android.OS.Parcel, int, long)
  writeLongArray(Landroid/os/Parcel;I[JZ)V = WriteLongArray(Android.OS.Parcel, int, long[], bool)
  writeLongList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteLongList(Android.OS.Parcel, int, System.Collections.Generic.IList<Java.Lang.Long>, bool)
  writeLongObject(Landroid/os/Parcel;ILjava/lang/Long;Z)V = WriteLongObject(Android.OS.Parcel, int, Java.Lang.Long, bool)
  writeParcel(Landroid/os/Parcel;ILandroid/os/Parcel;Z)V = WriteParcel(Android.OS.Parcel, int, Android.OS.Parcel, bool)
  writeParcelable(Landroid/os/Parcel;ILandroid/os/Parcelable;IZ)V = WriteParcelable(Android.OS.Parcel, int, Android.OS.IParcelable, int, bool)
  writeParcelArray(Landroid/os/Parcel;I[Landroid/os/Parcel;Z)V = WriteParcelArray(Android.OS.Parcel, int, Android.OS.Parcel[], bool)
  writeParcelList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteParcelList(Android.OS.Parcel, int, System.Collections.Generic.IList<Android.OS.Parcel>, bool)
  writeParcelSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteParcelSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeShort(Landroid/os/Parcel;IS)V = WriteShort(Android.OS.Parcel, int, short)
  writeSparseBooleanArray(Landroid/os/Parcel;ILandroid/util/SparseBooleanArray;Z)V = WriteSparseBooleanArray(Android.OS.Parcel, int, Android.Util.SparseBooleanArray, bool)
  writeSparseIntArray(Landroid/os/Parcel;ILandroid/util/SparseIntArray;Z)V = WriteSparseIntArray(Android.OS.Parcel, int, Android.Util.SparseIntArray, bool)
  writeSparseLongArray(Landroid/os/Parcel;ILandroid/util/SparseLongArray;Z)V = WriteSparseLongArray(Android.OS.Parcel, int, Android.Util.SparseLongArray, bool)
  writeString(Landroid/os/Parcel;ILjava/lang/String;Z)V = WriteString(Android.OS.Parcel, int, string, bool)
  writeStringArray(Landroid/os/Parcel;I[Ljava/lang/String;Z)V = WriteStringArray(Android.OS.Parcel, int, string[], bool)
  writeStringList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteStringList(Android.OS.Parcel, int, System.Collections.Generic.IList<string>, bool)
  writeStringSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteStringSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
  writeTypedArray(Landroid/os/Parcel;I[Landroid/os/Parcelable;IZ)V = WriteTypedArray(Android.OS.Parcel, int, Java.Lang.Object[], int, bool)
  writeTypedList(Landroid/os/Parcel;ILjava/util/List;Z)V = WriteTypedList(Android.OS.Parcel, int, System.Collections.IList, bool)
  writeTypedSparseArray(Landroid/os/Parcel;ILandroid/util/SparseArray;Z)V = WriteTypedSparseArray(Android.OS.Parcel, int, Android.Util.SparseArray, bool)
com/huawei/hms/common/internal/TaskApiCall = Huawei.Hms.Common.Internal.TaskApiCall
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(string, string, string, int)
  getApiLevel()I = ApiLevel
  setApiLevel(I)V = ApiLevel
  getMinApkVersion()I = MinApkVersion
  getParcelable()Landroid/os/Parcelable; = Parcelable
  setParcelable(Landroid/os/Parcelable;)V = Parcelable
  getRequestJson()Ljava/lang/String; = RequestJson
  getToken()Lcom/huawei/hmf/tasks/CancellationToken; = Token
  setToken(Lcom/huawei/hmf/tasks/CancellationToken;)V = Token
  getTransactionId()Ljava/lang/String; = TransactionId
  setTransactionId(Ljava/lang/String;)V = TransactionId
  getUri()Ljava/lang/String; = Uri
  onResponse(Lcom/huawei/hms/common/internal/AnyClient;Lcom/huawei/hms/common/internal/ResponseErrorCode;Ljava/lang/String;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = OnResponse(Java.Lang.Object, Huawei.Hms.Common.Internal.IResponseErrorCode, string, Huawei.Hmf.Tasks.TaskCompletionSource)
com/huawei/hms/common/internal/TaskApiCallWrapper = Huawei.Hms.Common.Internal.TaskApiCallWrapper
  <init>(Lcom/huawei/hms/common/internal/TaskApiCall;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = .ctor(Huawei.Hms.Common.Internal.TaskApiCall, Huawei.Hmf.Tasks.TaskCompletionSource)
  getTaskApiCall()Lcom/huawei/hms/common/internal/TaskApiCall; = TaskApiCall
  getTaskCompletionSource()Lcom/huawei/hmf/tasks/TaskCompletionSource; = TaskCompletionSource
com/huawei/hms/common/internal/TransactionIdCreater = Huawei.Hms.Common.Internal.TransactionIdCreater
  <init>()V = .ctor()
  getId(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetId(string, string)
com/huawei/hms/common/ResolvableApiException = Huawei.Hms.Common.ResolvableApiException
  <init>(Lcom/huawei/hms/support/api/client/Status;)V = .ctor(Huawei.Hms.Support.Api.Client.Status)
  getResolution()Landroid/app/PendingIntent; = Resolution
  startResolutionForResult(Landroid/app/Activity;I)V = StartResolutionForResult(Android.App.Activity, int)
com/huawei/hms/common/size/Size = Huawei.Hms.Common.Size.Size
  <init>(II)V = .ctor(int, int)
  getHeight()I = Height
  getWidth()I = Width
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  parseSize(Ljava/lang/String;)Lcom/huawei/hms/common/size/Size; = ParseSize(string)
  toString()Ljava/lang/String; = ToString()
com/huawei/hms/common/sqlite/HMSCursorWrapper = Huawei.Hms.Common.Sqlite.HMSCursorWrapper
  <init>(Landroid/database/Cursor;)V = .ctor(Android.Database.ICursor)
  getWindow()Landroid/database/CursorWindow; = Window
  setWindow(Landroid/database/CursorWindow;)V = Window
  fillWindow(ILandroid/database/CursorWindow;)V = FillWindow(int, Android.Database.CursorWindow)
  onMove(II)Z = OnMove(int, int)
com/huawei/hms/common/util/Base64Utils = Huawei.Hms.Common.Util.Base64Utils
  <init>()V = .ctor()
  decode(Ljava/lang/String;)[B = Decode(string)
  decodeUrlSafe(Ljava/lang/String;)[B = DecodeUrlSafe(string)
  decodeUrlSafeNoPadding(Ljava/lang/String;)[B = DecodeUrlSafeNoPadding(string)
  encode([B)Ljava/lang/String; = Encode(byte[])
  encodeUrlSafe([B)Ljava/lang/String; = EncodeUrlSafe(byte[])
  encodeUrlSafeNoPadding([B)Ljava/lang/String; = EncodeUrlSafeNoPadding(byte[])
com/huawei/hms/common/util/HMSSDKConstants = Huawei.Hms.Common.Util.IHMSSDKConstants
  FITNESS = Fitness
  GAMES = Games
com/huawei/hms/common/webserverpic/WebServerPic = Huawei.Hms.Common.Webserverpic.WebServerPic
  <init>(Landroid/net/Uri;)V = .ctor(Android.Net.Uri)
  <init>(Landroid/net/Uri;II)V = .ctor(Android.Net.Uri, int, int)
  CREATOR = Creator
  getHeight()I = Height
  getUrl()Landroid/net/Uri; = Url
  getWidth()I = Width
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, int)
com/huawei/hms/common/webserverpic/WebServerPicCreator = Huawei.Hms.Common.Webserverpic.WebServerPicCreator
  <init>()V = .ctor()
  createFromParcel(Landroid/os/Parcel;)Lcom/huawei/hms/common/webserverpic/WebServerPic; = CreateFromParcel(Android.OS.Parcel)
  newArray(I)[Lcom/huawei/hms/common/webserverpic/WebServerPic; = NewArray(int)
com/huawei/hms/core/aidl/AbstractMessageEntity = Huawei.Hms.Core.Aidl.AbstractMessageEntity
  <init>()V = .ctor()
  getCommonStatus()Lcom/huawei/hms/support/api/client/Status; = CommonStatus
  setCommonStatus(Lcom/huawei/hms/support/api/client/Status;)V = CommonStatus
com/huawei/hms/core/aidl/annotation/Packed = Huawei.Hms.Core.Aidl.Annotation.IPacked
com/huawei/hms/core/aidl/IMessageEntity = Huawei.Hms.Core.Aidl.IMessageEntity
com/huawei/hms/core/aidl/RequestHeader = Huawei.Hms.Core.Aidl.RequestHeader
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = .ctor(string, string, int, string)
  getApiNameList()Ljava/util/List; = ApiNameList
  setApiNameList(Ljava/util/List;)V = ApiNameList
  getAppID()Ljava/lang/String; = AppID
  setAppID(Ljava/lang/String;)V = AppID
  getPackageName()Ljava/lang/String; = PackageName
  setPackageName(Ljava/lang/String;)V = PackageName
  getSdkVersion()I = SdkVersion
  setSdkVersion(I)V = SdkVersion
  getSessionId()Ljava/lang/String; = SessionId
  setSessionId(Ljava/lang/String;)V = SessionId
  setApiLevel(I)V = SetApiLevel(int)
com/huawei/hms/core/aidl/ResponseHeader = Huawei.Hms.Core.Aidl.ResponseHeader
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  statusCode = StatusCode
  getStatusCode()I = StatusCode
com/huawei/hms/security/SecComponentInstallWizard = Huawei.Hms.Security.SecComponentInstallWizard
  <init>()V = .ctor()
  PROVIDER_NAME = ProviderName
  install(Landroid/content/Context;)V = Install(Android.Content.Context)
com/huawei/hms/support/api/client/ApiClient = Huawei.Hms.Support.Api.Client.IApiClient
  getAppID()Ljava/lang/String; = AppID
  getContext()Landroid/content/Context; = Context
  getCpID()Ljava/lang/String; = CpID
  isConnected()Z = IsConnected
  getPackageName()Ljava/lang/String; = PackageName
  getSessionId()Ljava/lang/String; = SessionId
  getSubAppInfo()Lcom/huawei/hms/support/api/client/SubAppInfo; = SubAppInfo
  getTransportName()Ljava/lang/String; = TransportName
com/huawei/hms/support/api/client/BundleResult = Huawei.Hms.Support.Api.Client.BundleResult
  <init>(ILandroid/os/Bundle;)V = .ctor(int, Android.OS.Bundle)
  getResultCode()I = ResultCode
  setResultCode(I)V = ResultCode
  getRspBody()Landroid/os/Bundle; = RspBody
  setRspBody(Landroid/os/Bundle;)V = RspBody
com/huawei/hms/support/api/client/ConvertedResult = Huawei.Hms.Support.Api.Client.ConvertedResult
  <init>()V = .ctor()
  convertResult(Lcom/huawei/hms/support/api/client/ResultConvert;)Lcom/huawei/hms/support/api/client/ConvertedResult; = ConvertResult(Huawei.Hms.Support.Api.Client.ResultConvert)
  finalExec(Lcom/huawei/hms/support/api/client/ResultCallbacks;)V = FinalExec(Huawei.Hms.Support.Api.Client.ResultCallbacks)
com/huawei/hms/support/api/client/EmptyPendingResult = Huawei.Hms.Support.Api.Client.EmptyPendingResult
  <init>()V = .ctor()
  isCanceled()Z = IsCanceled
  getResult()Lcom/huawei/hms/support/api/client/Result; = Result
  setResult(Lcom/huawei/hms/support/api/client/Result;)V = Result
  await()Lcom/huawei/hms/support/api/client/Result; = Await()
  await(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = Await(long, Java.Util.Concurrent.TimeUnit)
  cancel()V = Cancel()
  setResultCallback(Landroid/os/Looper;Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Android.OS.Looper, Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;JLjava/util/concurrent/TimeUnit;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback, long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/support/api/client/InnerPendingResult = Huawei.Hms.Support.Api.Client.InnerPendingResult
  <init>()V = .ctor()
  awaitOnAnyThread()Lcom/huawei/hms/support/api/client/Result; = AwaitOnAnyThread()
  awaitOnAnyThread(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = AwaitOnAnyThread(long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/support/api/client/PendingResult = Huawei.Hms.Support.Api.Client.PendingResult
  <init>()V = .ctor()
  isCanceled()Z = IsCanceled
  await()Lcom/huawei/hms/support/api/client/Result; = Await()
  await(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = Await(long, Java.Util.Concurrent.TimeUnit)
  cancel()V = Cancel()
  convertResult(Lcom/huawei/hms/support/api/client/ResultConvert;)Lcom/huawei/hms/support/api/client/ConvertedResult; = ConvertResult(Huawei.Hms.Support.Api.Client.ResultConvert)
  setResultCallback(Landroid/os/Looper;Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Android.OS.Looper, Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;JLjava/util/concurrent/TimeUnit;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback, long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/support/api/client/PendingResultsCreator = Huawei.Hms.Support.Api.Client.PendingResultsCreator
  <init>()V = .ctor()
  discardedPendingResult()Lcom/huawei/hms/support/api/client/PendingResult; = InvokeDiscardedPendingResult()
  discardedPendingResult(Lcom/huawei/hms/support/api/client/Result;)Lcom/huawei/hms/support/api/client/PendingResult; = InvokeDiscardedPendingResult(Java.Lang.Object)
  instantPendingResult(Lcom/huawei/hms/support/api/client/Status;)Lcom/huawei/hms/support/api/client/PendingResult; = InvokeInstantPendingResult(Huawei.Hms.Support.Api.Client.Status)
  instantPendingResult(Lcom/huawei/hms/support/api/client/Result;)Lcom/huawei/hms/common/api/OptionalPendingResult; = InvokeInstantPendingResult(Java.Lang.Object)
com/huawei/hms/support/api/client/ResolvingResultCallbacks = Huawei.Hms.Support.Api.Client.ResolvingResultCallbacks
  <init>(Landroid/app/Activity;I)V = .ctor(Android.App.Activity, int)
  onFailure(Lcom/huawei/hms/support/api/client/Status;)V = OnFailure(Huawei.Hms.Support.Api.Client.Status)
  onSuccess(Ljava/lang/Object;)V = OnSuccess(Java.Lang.Object)
  onUnresolvableFailure(Lcom/huawei/hms/support/api/client/Status;)V = OnUnresolvableFailure(Huawei.Hms.Support.Api.Client.Status)
com/huawei/hms/support/api/client/Result = Huawei.Hms.Support.Api.Client.Result
  <init>()V = .ctor()
  getStatus()Lcom/huawei/hms/support/api/client/Status; = Status
  setStatus(Lcom/huawei/hms/support/api/client/Status;)V = Status
com/huawei/hms/support/api/client/ResultCallback = Huawei.Hms.Support.Api.Client.IResultCallback
  onResult(Ljava/lang/Object;)V = OnResult(Java.Lang.Object)
com/huawei/hms/support/api/client/ResultCallbacks = Huawei.Hms.Support.Api.Client.ResultCallbacks
  <init>()V = .ctor()
  onFailure(Lcom/huawei/hms/support/api/client/Status;)V = OnFailure(Huawei.Hms.Support.Api.Client.Status)
  onResult(Lcom/huawei/hms/support/api/client/Result;)V = OnResult(Java.Lang.Object)
  onSuccess(Lcom/huawei/hms/support/api/client/Result;)V = OnSuccess(Java.Lang.Object)
com/huawei/hms/support/api/client/ResultConvert = Huawei.Hms.Support.Api.Client.ResultConvert
  <init>()V = .ctor()
  newFailedPendingResult(Lcom/huawei/hms/support/api/client/Status;)Lcom/huawei/hms/support/api/client/PendingResult; = NewFailedPendingResult(Huawei.Hms.Support.Api.Client.Status)
  onFailed(Lcom/huawei/hms/support/api/client/Status;)Lcom/huawei/hms/support/api/client/Status; = OnFailed(Huawei.Hms.Support.Api.Client.Status)
  onSuccess(Lcom/huawei/hms/support/api/client/Result;)Lcom/huawei/hms/support/api/client/PendingResult; = OnSuccess(Huawei.Hms.Support.Api.Client.Result)
com/huawei/hms/support/api/client/Status = Huawei.Hms.Support.Api.Client.Status
  <init>(I)V = .ctor(int)
  <init>(ILjava/lang/String;)V = .ctor(int, string)
  <init>(ILjava/lang/String;Landroid/app/PendingIntent;)V = .ctor(int, string, Android.App.PendingIntent)
  <init>(ILjava/lang/String;Landroid/content/Intent;)V = .ctor(int, string, Android.Content.Intent)
  CoreException = CoreException
  CREATOR = Creator
  FAILURE = Failure
  MessageNotFound = MessageNotFound
  RESULT_CANCELED = ResultCanceled
  RESULT_DEAD_CLIENT = ResultDeadClient
  RESULT_INTERNAL_ERROR = ResultInternalError
  RESULT_INTERRUPTED = ResultInterrupted
  RESULT_TIMEOUT = ResultTimeout
  SUCCESS = Success
  getErrorString()Ljava/lang/String; = ErrorString
  hasResolution()Z = HasResolution
  isCanceled()Z = IsCanceled
  isInterrupted()Z = IsInterrupted
  isSuccess()Z = IsSuccess
  getResolution()Landroid/app/PendingIntent; = Resolution
  getStatusCode()I = StatusCode
  getStatusMessage()Ljava/lang/String; = StatusMessage
  describeContents()I = DescribeContents()
  startResolutionForResult(Landroid/app/Activity;I)V = StartResolutionForResult(Android.App.Activity, int)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/support/api/client/SubAppInfo = Huawei.Hms.Support.Api.Client.SubAppInfo
  <init>(Lcom/huawei/hms/support/api/client/SubAppInfo;)V = .ctor(Huawei.Hms.Support.Api.Client.SubAppInfo)
  <init>(Ljava/lang/String;)V = .ctor(string)
  getSubAppID()Ljava/lang/String; = SubAppID
  setSubAppID(Ljava/lang/String;)V = SubAppID
com/huawei/hms/support/api/core/ConnectService = Huawei.Hms.Support.Api.Core.ConnectService
  checkconnect(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/entity/core/CheckConnectInfo;)Lcom/huawei/hms/support/api/client/InnerPendingResult; = Checkconnect(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Entity.Core.CheckConnectInfo)
  connect(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/entity/core/ConnectInfo;)Lcom/huawei/hms/support/api/client/PendingResult; = Connect(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Entity.Core.ConnectInfo)
  disconnect(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/entity/core/DisconnectInfo;)Lcom/huawei/hms/support/api/ResolvePendingResult; = Disconnect(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Entity.Core.DisconnectInfo)
  forceConnect(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/entity/core/ConnectInfo;)Lcom/huawei/hms/support/api/client/PendingResult; = ForceConnect(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Entity.Core.ConnectInfo)
  getNotice(Lcom/huawei/hms/support/api/client/ApiClient;ILjava/lang/String;)Lcom/huawei/hms/support/api/client/PendingResult; = GetNotice(Huawei.Hms.Support.Api.Client.IApiClient, int, string)
com/huawei/hms/support/api/entity/auth/AbstractResp = Huawei.Hms.Support.Api.Entity.Auth.AbstractResp
  <init>()V = .ctor()
  getErrorReason()Ljava/lang/String; = ErrorReason
  setErrorReason(Ljava/lang/String;)V = ErrorReason
  getRtnCode()I = RtnCode
  setRtnCode(I)V = RtnCode
com/huawei/hms/support/api/entity/auth/AuthCode = Huawei.Hms.Support.Api.Entity.Auth.IAuthCode
com/huawei/hms/support/api/entity/auth/PermissionInfo = Huawei.Hms.Support.Api.Entity.Auth.PermissionInfo
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  CREATOR = Creator
  getAppID()Ljava/lang/String; = AppID
  setAppID(Ljava/lang/String;)V = AppID
  getPackageName()Ljava/lang/String; = PackageName
  setPackageName(Ljava/lang/String;)V = PackageName
  getPermission()Ljava/lang/String; = Permission
  setPermission(Ljava/lang/String;)V = Permission
  describeContents()I = DescribeContents()
  setPermissionUri(Ljava/lang/String;)Lcom/huawei/hms/support/api/entity/auth/PermissionInfo; = SetPermissionUri(string)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/support/api/entity/auth/Scope = Huawei.Hms.Support.Api.Entity.Auth.Scope
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/String;)V = .ctor(string)
  CREATOR = Creator
  getScopeUri()Ljava/lang/String; = ScopeUri
  describeContents()I = DescribeContents()
  equeals(Ljava/lang/Object;)Z = Equeals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  toString()Ljava/lang/String; = ToString()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/huawei/hms/support/api/entity/core/CheckConnectInfo = Huawei.Hms.Support.Api.Entity.Core.CheckConnectInfo
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/core/CheckConnectResp = Huawei.Hms.Support.Api.Entity.Core.CheckConnectResp
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/core/CommonCode = Huawei.Hms.Support.Api.Entity.Core.ICommonCode
  ERROR = Error
  OK = Ok
com/huawei/hms/support/api/entity/core/ConnectInfo = Huawei.Hms.Support.Api.Entity.Core.ConnectInfo
  <init>()V = .ctor()
  <init>(Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;)V = .ctor(System.Collections.Generic.IList<string>, System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.Scope>, string, string)
  getApiNameList()Ljava/util/List; = ApiNameList
  setApiNameList(Ljava/util/List;)V = ApiNameList
  getFingerprint()Ljava/lang/String; = Fingerprint
  setFingerprint(Ljava/lang/String;)V = Fingerprint
  getScopeList()Ljava/util/List; = ScopeList
  setScopeList(Ljava/util/List;)V = ScopeList
  getSubAppID()Ljava/lang/String; = SubAppID
  setSubAppID(Ljava/lang/String;)V = SubAppID
com/huawei/hms/support/api/entity/core/ConnectResp = Huawei.Hms.Support.Api.Entity.Core.ConnectResp
  <init>()V = .ctor()
  protocolVersion = ProtocolVersion
  sessionId = SessionId
com/huawei/hms/support/api/entity/core/CoreNaming = Huawei.Hms.Support.Api.Entity.Core.ICoreNaming
  CHECKCONNECT = Checkconnect
  CONNECT = Connect
  DISCONNECT = Disconnect
  FORECONNECT = Foreconnect
  GETNOTICE = Getnotice
  HUBREQUEST = Hubrequest
com/huawei/hms/support/api/entity/core/DisconnectInfo = Huawei.Hms.Support.Api.Entity.Core.DisconnectInfo
  <init>()V = .ctor()
  <init>(Ljava/util/List;Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Huawei.Hms.Support.Api.Entity.Auth.Scope>, System.Collections.Generic.IList<string>)
  apiNameList = ApiNameList
  scopeList = ScopeList
  getApiNameList()Ljava/util/List; = ApiNameList
  getScopeList()Ljava/util/List; = ScopeList
com/huawei/hms/support/api/entity/core/DisconnectResp = Huawei.Hms.Support.Api.Entity.Core.DisconnectResp
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/core/JosBaseReq = Huawei.Hms.Support.Api.Entity.Core.JosBaseReq
  <init>()V = .ctor()
  getChannelId()Ljava/lang/String; = ChannelId
  setChannelId(Ljava/lang/String;)V = ChannelId
  getCpID()Ljava/lang/String; = CpID
  setCpID(Ljava/lang/String;)V = CpID
  getHmsSdkVersionName()Ljava/lang/String; = HmsSdkVersionName
  setHmsSdkVersionName(Ljava/lang/String;)V = HmsSdkVersionName
com/huawei/hms/support/api/entity/core/JosBaseResp = Huawei.Hms.Support.Api.Entity.Core.JosBaseResp
  <init>()V = .ctor()
  getStatusCode()I = StatusCode
  setStatusCode(I)V = StatusCode
com/huawei/hms/support/api/entity/core/JosGetNoticeReq = Huawei.Hms.Support.Api.Entity.Core.JosGetNoticeReq
  <init>()V = .ctor()
  NOTICE_TYPE_CONN = NoticeTypeConn
  NOTICE_TYPE_SIGN = NoticeTypeSign
  getNoticeType()I = NoticeType
  setNoticeType(I)V = NoticeType
com/huawei/hms/support/api/entity/core/JosGetNoticeResp = Huawei.Hms.Support.Api.Entity.Core.JosGetNoticeResp
  <init>()V = .ctor()
  getNoticeIntent()Landroid/content/Intent; = NoticeIntent
  setNoticeIntent(Landroid/content/Intent;)V = NoticeIntent
com/huawei/hms/support/api/entity/core/JosNoticeResult = Huawei.Hms.Support.Api.Entity.Core.JosNoticeResult
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/core/JosStatusCodes = Huawei.Hms.Support.Api.Entity.Core.JosStatusCodes
  <init>()V = .ctor()
  RNT_CODE_NETWORK_ERROR = RntCodeNetworkError
  RNT_CODE_NO_JOS_INFO = RntCodeNoJosInfo
  RNT_CODE_SERVER_ERROR = RntCodeServerError
  RTN_CODE_COMMON_ERROR = RtnCodeCommonError
  RTN_CODE_NO_SUPPORT_JOS = RtnCodeNoSupportJos
  RTN_CODE_PARAMS_ERROR = RtnCodeParamsError
  SUCCESS = Success
com/huawei/hms/support/api/ErrorResultImpl = Huawei.Hms.Support.Api.ErrorResultImpl
  <init>(I)V = .ctor(int)
  isCanceled()Z = IsCanceled
  await()Lcom/huawei/hms/support/api/client/Result; = Await()
  await(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = Await(long, Java.Util.Concurrent.TimeUnit)
  cancel()V = Cancel()
  setResultCallback(Landroid/os/Looper;Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Android.OS.Looper, Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;JLjava/util/concurrent/TimeUnit;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback, long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/support/api/ModuleLifecycleCallback = Huawei.Hms.Support.Api.IModuleLifecycleCallback
  onCreated(Landroid/content/Context;)V = OnCreated(Android.Content.Context)
  onDestroyed(Landroid/content/Context;)V = OnDestroyed(Android.Content.Context)
com/huawei/hms/support/api/PendingResultImpl = Huawei.Hms.Support.Api.PendingResultImpl
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient, string, Huawei.Hms.Core.Aidl.IMessageEntity)
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;I)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient, string, Huawei.Hms.Core.Aidl.IMessageEntity, int)
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/Class;)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient, string, Huawei.Hms.Core.Aidl.IMessageEntity, Java.Lang.Class)
  transport = Transport
  isCanceled()Z = IsCanceled
  getResponseType()Ljava/lang/Class; = ResponseType
  await()Lcom/huawei/hms/support/api/client/Result; = Await()
  await(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = Await(long, Java.Util.Concurrent.TimeUnit)
  awaitOnAnyThread()Lcom/huawei/hms/support/api/client/Result; = AwaitOnAnyThread()
  awaitOnAnyThread(JLjava/util/concurrent/TimeUnit;)Lcom/huawei/hms/support/api/client/Result; = AwaitOnAnyThread(long, Java.Util.Concurrent.TimeUnit)
  cancel()V = Cancel()
  checkApiClient(Lcom/huawei/hms/support/api/client/ApiClient;)Z = CheckApiClient(Huawei.Hms.Support.Api.Client.IApiClient)
  onError(I)Lcom/huawei/hms/support/api/client/Result; = OnError(int)
  setResultCallback(Landroid/os/Looper;Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Android.OS.Looper, Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback)
  setResultCallback(Lcom/huawei/hms/support/api/client/ResultCallback;JLjava/util/concurrent/TimeUnit;)V = SetResultCallback(Huawei.Hms.Support.Api.Client.IResultCallback, long, Java.Util.Concurrent.TimeUnit)
com/huawei/hms/support/api/ResolvePendingResult = Huawei.Hms.Support.Api.ResolvePendingResult
  <init>(Lcom/huawei/hms/support/api/client/ApiClient;Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/Class;)V = .ctor(Huawei.Hms.Support.Api.Client.IApiClient, string, Huawei.Hms.Core.Aidl.IMessageEntity, Java.Lang.Class)
  build(Lcom/huawei/hms/support/api/client/ApiClient;Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;Ljava/lang/Class;)Lcom/huawei/hms/support/api/ResolvePendingResult; = Build(Huawei.Hms.Support.Api.Client.IApiClient, string, Huawei.Hms.Core.Aidl.IMessageEntity, Java.Lang.Class)
  get()Lcom/huawei/hms/core/aidl/IMessageEntity; = Get()
  onComplete(Lcom/huawei/hms/core/aidl/IMessageEntity;)Lcom/huawei/hms/support/api/ResolveResult; = OnComplete(Java.Lang.Object)
com/huawei/hms/support/api/ResolveResult = Huawei.Hms.Support.Api.ResolveResult
  <init>()V = .ctor()
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  getValue()Ljava/lang/Object; = Value
com/huawei/hms/support/api/transport/DatagramTransport = Huawei.Hms.Support.Api.Transport.IDatagramTransport
  post(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/transport/DatagramTransport$CallBack;)V = Post(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Transport.IDatagramTransportCallBack)
  send(Lcom/huawei/hms/support/api/client/ApiClient;Lcom/huawei/hms/support/api/transport/DatagramTransport$CallBack;)V = Send(Huawei.Hms.Support.Api.Client.IApiClient, Huawei.Hms.Support.Api.Transport.IDatagramTransportCallBack)
com/huawei/hms/support/hianalytics/HiAnalyticsBase = Huawei.Hms.Support.Hianalytics.HiAnalyticsBase
  <init>()V = .ctor()
  getMapForBi(Landroid/content/Context;Ljava/lang/String;)Ljava/util/Map; = GetMapForBi(Android.Content.Context, string)
com/huawei/hms/support/hianalytics/HiAnalyticsClient = Huawei.Hms.Support.Hianalytics.HiAnalyticsClient
  <init>()V = .ctor()
  reportEntry(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = ReportEntry(Android.Content.Context, string)
  reportEntry(Landroid/content/Context;Ljava/lang/String;I)Ljava/lang/String; = ReportEntry(Android.Content.Context, string, int)
  reportEntry(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; = ReportEntry(Android.Content.Context, string, string, int)
  reportExit(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;II)V = ReportExit(Android.Content.Context, string, string, int, int)
  reportExit(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;III)V = ReportExit(Android.Content.Context, string, string, int, int, int)
  reportExit(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;III)V = ReportExit(Android.Content.Context, string, string, string, int, int, int)
com/huawei/hms/support/hianalytics/HiAnalyticsInnerClient = Huawei.Hms.Support.Hianalytics.HiAnalyticsInnerClient
  <init>()V = .ctor()
  reportEntryClient(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = ReportEntryClient(Android.Content.Context, string, string, string, string)
  reportEntryExit(Landroid/content/Context;Lcom/huawei/hms/common/internal/ResponseHeader;Ljava/lang/String;)V = ReportEntryExit(Android.Content.Context, Huawei.Hms.Common.Internal.ResponseHeader, string)
com/huawei/hms/support/hianalytics/HiAnalyticsUtil = Huawei.Hms.Support.Hianalytics.HiAnalyticsUtil
  <init>()V = .ctor()
  hasError()Z = HasError
  getInstance()Lcom/huawei/hms/support/hianalytics/HiAnalyticsUtil; = Instance
  getMapForBi(Landroid/content/Context;Ljava/lang/String;)Ljava/util/Map; = GetMapForBi(Android.Content.Context, string)
  getMapFromForegroundRequestHeader(Lcom/huawei/hms/common/internal/RequestHeader;)Ljava/util/Map; = GetMapFromForegroundRequestHeader(Huawei.Hms.Common.Internal.RequestHeader)
  getMapFromForegroundResponseHeader(Lcom/huawei/hms/common/internal/ResponseHeader;)Ljava/util/Map; = GetMapFromForegroundResponseHeader(Huawei.Hms.Common.Internal.ResponseHeader)
  getMapFromRequestHeader(Lcom/huawei/hms/common/internal/RequestHeader;)Ljava/util/Map; = GetMapFromRequestHeader(Huawei.Hms.Common.Internal.RequestHeader)
  getMapFromRequestHeader(Lcom/huawei/hms/common/internal/ResponseHeader;)Ljava/util/Map; = GetMapFromRequestHeader(Huawei.Hms.Common.Internal.ResponseHeader)
  hasError(Landroid/content/Context;)Z = InvokeHasError(Android.Content.Context)
  onBuoyEvent(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = OnBuoyEvent(Android.Content.Context, string, string)
  onEvent(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = OnEvent(Android.Content.Context, string, string)
  onEvent(Landroid/content/Context;Ljava/lang/String;Ljava/util/Map;)V = OnEvent(Android.Content.Context, string, System.Collections.Generic.IDictionary<string, string>)
  onEvent2(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = OnEvent2(Android.Content.Context, string, string)
  onNewEvent(Landroid/content/Context;Ljava/lang/String;Ljava/util/Map;)V = OnNewEvent(Android.Content.Context, string, System.Collections.IDictionary)
  versionCodeToName(Ljava/lang/String;)Ljava/lang/String; = VersionCodeToName(string)
com/huawei/hms/utils/JsonUtil = Huawei.Hms.Utils.JsonUtil
  <init>()V = .ctor()
  VAL_BYTE = ValByte
  VAL_ENTITY = ValEntity
  VAL_LIST = ValList
  VAL_MAP = ValMap
  VAL_NULL = ValNull
  VAL_TYPE = ValType
  createJsonString(Lcom/huawei/hms/core/aidl/IMessageEntity;)Ljava/lang/String; = CreateJsonString(Huawei.Hms.Core.Aidl.IMessageEntity)
  getInfoFromJsonobject(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object; = GetInfoFromJsonobject(string, string)
  getIntValue(Lorg/json/JSONObject;Ljava/lang/String;)I = GetIntValue(Org.Json.JSONObject, string)
  getStringValue(Lorg/json/JSONObject;Ljava/lang/String;)Ljava/lang/String; = GetStringValue(Org.Json.JSONObject, string)
  jsonToEntity(Ljava/lang/String;Lcom/huawei/hms/core/aidl/IMessageEntity;)Lcom/huawei/hms/core/aidl/IMessageEntity; = JsonToEntity(string, Huawei.Hms.Core.Aidl.IMessageEntity)
com/huawei/hms/utils/Util = Huawei.Hms.Utils.Util
  <init>()V = .ctor()
  isChinaROM()Z = IsChinaROM
  isEMUI()Z = IsEMUI
  getProductCountry()Ljava/lang/String; = ProductCountry
  compareHmsVersion(Ljava/lang/String;Ljava/lang/String;)I = CompareHmsVersion(string, string)
  getActiveActivity(Landroid/app/Activity;Landroid/content/Context;)Landroid/app/Activity; = GetActiveActivity(Android.App.Activity, Android.Content.Context)
  getAppId(Landroid/content/Context;)Ljava/lang/String; = GetAppId(Android.Content.Context)
  getAppName(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = GetAppName(Android.Content.Context, string)
  getCpId(Landroid/content/Context;)Ljava/lang/String; = GetCpId(Android.Content.Context)
  getHmsVersion(Landroid/content/Context;)I = GetHmsVersion(Android.Content.Context)
  getNetType(Landroid/content/Context;)Ljava/lang/String; = GetNetType(Android.Content.Context)
  getProcessName(Landroid/content/Context;I)Ljava/lang/String; = GetProcessName(Android.Content.Context, int)
  getServiceActionMetadata(Landroid/content/Context;)Ljava/lang/String; = GetServiceActionMetadata(Android.Content.Context)
  getSystemProperties(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetSystemProperties(string, string)
  getValidActivity(Landroid/app/Activity;Landroid/app/Activity;)Landroid/app/Activity; = GetValidActivity(Android.App.Activity, Android.App.Activity)
  isAvailableLibExist(Landroid/content/Context;)Z = IsAvailableLibExist(Android.Content.Context)
  unBindServiceCatchException(Landroid/content/Context;Landroid/content/ServiceConnection;)V = UnBindServiceCatchException(Android.Content.Context, Android.Content.IServiceConnection)
