com/huawei/hms/aaid/constant/ErrorEnum = Huawei.Hms.Aaid.Constant.ErrorEnum
  <init>(IILjava/lang/String;ILjava/lang/String;)V = .ctor(int, int, string, int, string)
  ENUM_MAPPER = EnumMapper
  ERROR_3RD_PARTY_INTERNAL_ERROR = Error3rdPartyInternalError
  ERROR_API_NOT_SPECIFIED = ErrorApiNotSpecified
  ERROR_APP_SERVER_NOT_ONLINE = ErrorAppServerNotOnline
  ERROR_ARGUMENTS_INVALID = ErrorArgumentsInvalid
  ERROR_AUTH_INFO_NOT_EXIST = ErrorAuthInfoNotExist
  ERROR_AUTO_INITIALIZING = ErrorAutoInitializing
  ERROR_BIND_SERVICE_SELF_MAPPING = ErrorBindServiceSelfMapping
  ERROR_BUILD_CONTENT_ERROR = ErrorBuildContentError
  ERROR_CACHE_SIZE_EXCEED = ErrorCacheSizeExceed
  ERROR_CERT_FINGERPRINT_EMPTY = ErrorCertFingerprintEmpty
  ERROR_CERT_FINGERPRINT_ERROR = ErrorCertFingerprintError
  ERROR_CLIENT_API_INVALID = ErrorClientApiInvalid
  ERROR_DELETE_3RD_PARTY_TOKEN_FAILED = ErrorDelete3rdPartyTokenFailed
  ERROR_EXECUTE_TIMEOUT = ErrorExecuteTimeout
  ERROR_FETCH_DOMAIN_FAILED = ErrorFetchDomainFailed
  ERROR_GET_3RD_PARTY_TOKEN_FAILED = ErrorGet3rdPartyTokenFailed
  ERROR_GET_SCOPE_ERROR = ErrorGetScopeError
  ERROR_HMS_CLIENT_API = ErrorHmsClientApi
  ERROR_HMS_DEVICE_AUTH_FAILED_SELF_MAPPING = ErrorHmsDeviceAuthFailedSelfMapping
  ERROR_HWID_NOT_LOGIN = ErrorHwidNotLogin
  ERROR_INTERNAL_ERROR = ErrorInternalError
  ERROR_INVALID_PARAMETERS = ErrorInvalidParameters
  ERROR_LENGTH = ErrorLength
  ERROR_LENGTH_OLD = ErrorLengthOld
  ERROR_MAIN_THREAD = ErrorMainThread
  ERROR_MISSING_PROJECT_ID = ErrorMissingProjectId
  ERROR_MSG_CACHE = ErrorMsgCache
  ERROR_MULTISENDER_NO_RIGHT = ErrorMultisenderNoRight
  ERROR_NAMING_INVALID = ErrorNamingInvalid
  ERROR_NO_CONNECTION_ID = ErrorNoConnectionId
  ERROR_NO_CONNECTION_ID_OLD = ErrorNoConnectionIdOld
  ERROR_NO_DEVICE_ID_TYPE = ErrorNoDeviceIdType
  ERROR_NO_DEVICE_ID_TYPE_OLD = ErrorNoDeviceIdTypeOld
  ERROR_NO_NETWORK = ErrorNoNetwork
  ERROR_NO_NETWORK_OLD = ErrorNoNetworkOld
  ERROR_NO_RIGHT = ErrorNoRight
  ERROR_NO_RIGHT_SELF_MAPPING = ErrorNoRightSelfMapping
  ERROR_NOT_ALLOW_CROSS_APPLY = ErrorNotAllowCrossApply
  ERROR_NOT_IN_SERVICE = ErrorNotInService
  ERROR_NO_TOKEN = ErrorNoToken
  ERROR_NO_TOKEN_OLD = ErrorNoTokenOld
  ERROR_NO_TOKENSIGN = ErrorNoTokensign
  ERROR_OPERATION_NOT_SUPPORTED = ErrorOperationNotSupported
  ERROR_OVER_FLOW_CONTROL_SIZE = ErrorOverFlowControlSize
  ERROR_PARAM_INVALID = ErrorParamInvalid
  ERROR_PERMISSION_EXPIRED = ErrorPermissionExpired
  ERROR_PERMISSION_LIST_EMPTY = ErrorPermissionListEmpty
  ERROR_PERMISSION_NOT_AUTHORIZED = ErrorPermissionNotAuthorized
  ERROR_PERMISSION_NOT_EXIST = ErrorPermissionNotExist
  ERROR_PROFILE_EXCEED = ErrorProfileExceed
  ERROR_PUSH_ARGUMENTS_INVALID = ErrorPushArgumentsInvalid
  ERROR_PUSH_CLIENT_API_INVALID = ErrorPushClientApiInvalid
  ERROR_PUSH_EXECUTE_TIMEOUT = ErrorPushExecuteTimeout
  ERROR_PUSH_INTERNAL_ERROR = ErrorPushInternalError
  ERROR_PUSH_NAMING_INVALID = ErrorPushNamingInvalid
  ERROR_PUSH_NOT_IN_SERVICE = ErrorPushNotInService
  ERROR_PUSH_SERVER = ErrorPushServer
  ERROR_PUSH_SERVER_OLD = ErrorPushServerOld
  ERROR_RESTRICT_GET_TOKEN = ErrorRestrictGetToken
  ERROR_RETRY_LATER_SELF_MAPPING = ErrorRetryLaterSelfMapping
  ERROR_SCOPE_LIST_EMPTY = ErrorScopeListEmpty
  ERROR_SEND_SELF_MAPPING = ErrorSendSelfMapping
  ERROR_SERVICE_NOT_AVAILABLE = ErrorServiceNotAvailable
  ERROR_SESSION_INVALID = ErrorSessionInvalid
  ERROR_SIZE = ErrorSize
  ERROR_SPUSH_ESSION_INVALID = ErrorSpushEssionInvalid
  ERROR_STORAGE_LOCATION_EMPTY = ErrorStorageLocationEmpty
  ERROR_TOKEN_DECRYPT = ErrorTokenDecrypt
  ERROR_TOKENSIGN_VALID = ErrorTokensignValid
  ERROR_TOKEN_URL_EMPTY = ErrorTokenUrlEmpty
  ERROR_TOO_MANY_MESSAGES = ErrorTooManyMessages
  ERROR_TOPIC_EXCEED = ErrorTopicExceed
  ERROR_TOPIC_SEND = ErrorTopicSend
  ERROR_TTL_EXCEEDED = ErrorTtlExceeded
  ERROR_UNKNOWN = ErrorUnknown
  ERROR_UPSTREAM_DEVICE_NOT_IN_GROUP = ErrorUpstreamDeviceNotInGroup
  ERROR_UPSTREAM_STORAGE_LOCATION_EMPTY = ErrorUpstreamStorageLocationEmpty
  ERROR_UPSTREAM_TOKEN_DECRYPT = ErrorUpstreamTokenDecrypt
  ERROR_UPSTREAM_TOKENSIGN_VALID = ErrorUpstreamTokensignValid
  externalCode = ExternalCode
  internalCode = InternalCode
  message = Message
  SUCCESS = Success
  getExternalCode()I = ExternalCode
  getInternalCode()I = InternalCode
  getMessage()Ljava/lang/String; = Message
  fromCode(I)Lcom/huawei/hms/aaid/constant/ErrorEnum; = FromCode(int)
  toApiException()Lcom/huawei/hms/common/ApiException; = ToApiException()
  valueOf(Ljava/lang/String;)Lcom/huawei/hms/aaid/constant/ErrorEnum; = ValueOf(string)
  values()[Lcom/huawei/hms/aaid/constant/ErrorEnum; = Values()
com/huawei/hms/aaid/encrypt/PushEncrypter = Huawei.Hms.Aaid.Encrypt.PushEncrypter
  <init>()V = .ctor()
  decrypter(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = Decrypter(Android.Content.Context, string)
  encrypter(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = Encrypter(Android.Content.Context, string)
  encrypterOld(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = EncrypterOld(Android.Content.Context, string)
com/huawei/hms/aaid/entity/AAIDResult = Huawei.Hms.Aaid.Entity.AAIDResult
  <init>()V = .ctor()
  id = Id
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
com/huawei/hms/aaid/entity/DeleteTokenReq = Huawei.Hms.Aaid.Entity.DeleteTokenReq
  <init>()V = .ctor()
  appId = AppId
  deleteType = DeleteType
  isFastApp = IsFastApp
  isMultiSender = IsMultiSender
  pkgName = PkgName
  projectId = ProjectId
  scope = Scope
  subjectId = SubjectId
  token = Token
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  getDeleteType()I = DeleteType
  setDeleteType(I)V = DeleteType
  isFastApp()Z = FastApp
  setFastApp(Z)V = FastApp
  isMultiSender()Z = MultiSender
  setMultiSender(Z)V = MultiSender
  getPkgName()Ljava/lang/String; = PkgName
  setPkgName(Ljava/lang/String;)V = PkgName
  getProjectId()Ljava/lang/String; = ProjectId
  setProjectId(Ljava/lang/String;)V = ProjectId
  getScope()Ljava/lang/String; = Scope
  setScope(Ljava/lang/String;)V = Scope
  getSubjectId()Ljava/lang/String; = SubjectId
  setSubjectId(Ljava/lang/String;)V = SubjectId
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
com/huawei/hms/aaid/entity/DeleteTokenResp = Huawei.Hms.Aaid.Entity.DeleteTokenResp
  <init>()V = .ctor()
  retCode = RetCode
  getRetCode()I = RetCode
  setRetCode(I)V = RetCode
com/huawei/hms/aaid/entity/TokenReq = Huawei.Hms.Aaid.Entity.TokenReq
  <init>()V = .ctor()
  aaid = Aaid
  appId = AppId
  firstTime = FirstTime
  isFastApp = IsFastApp
  isMultiSender = IsMultiSender
  packageName = PackageName
  projectId = ProjectId
  scope = Scope
  subjectId = SubjectId
  getAaid()Ljava/lang/String; = Aaid
  setAaid(Ljava/lang/String;)V = Aaid
  getAppId()Ljava/lang/String; = AppId
  setAppId(Ljava/lang/String;)V = AppId
  isFastApp()Z = FastApp
  setFastApp(Z)V = FastApp
  isFirstTime()Z = FirstTime
  setFirstTime(Z)V = FirstTime
  isMultiSender()Z = MultiSender
  setMultiSender(Z)V = MultiSender
  getPackageName()Ljava/lang/String; = PackageName
  setPackageName(Ljava/lang/String;)V = PackageName
  getProjectId()Ljava/lang/String; = ProjectId
  setProjectId(Ljava/lang/String;)V = ProjectId
  getScope()Ljava/lang/String; = Scope
  setScope(Ljava/lang/String;)V = Scope
  getSubjectId()Ljava/lang/String; = SubjectId
  setSubjectId(Ljava/lang/String;)V = SubjectId
com/huawei/hms/aaid/entity/TokenResp = Huawei.Hms.Aaid.Entity.TokenResp
  <init>()V = .ctor()
  belongId = BelongId
  retCode = RetCode
  subjectId = SubjectId
  token = Token
  getBelongId()Ljava/lang/String; = BelongId
  setBelongId(Ljava/lang/String;)V = BelongId
  getRetCode()I = RetCode
  setRetCode(I)V = RetCode
  getSubjectId()Ljava/lang/String; = SubjectId
  setSubjectId(Ljava/lang/String;)V = SubjectId
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
com/huawei/hms/aaid/entity/TokenResult = Huawei.Hms.Aaid.Entity.TokenResult
  <init>()V = .ctor()
  belongId = BelongId
  retCode = RetCode
  token = Token
  getBelongId()Ljava/lang/String; = BelongId
  setBelongId(Ljava/lang/String;)V = BelongId
  getRetCode()I = RetCode
  setRetCode(I)V = RetCode
  getToken()Ljava/lang/String; = Token
  setToken(Ljava/lang/String;)V = Token
com/huawei/hms/aaid/HmsInstanceId = Huawei.Hms.Aaid.HmsInstanceId
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  b = B
  c = C
  TAG = Tag
  getAAID()Lcom/huawei/hmf/tasks/Task; = AAID
  getCreationTime()J = CreationTime
  getId()Ljava/lang/String; = Id
  getToken()Ljava/lang/String; = Token
  a()V = A()
  a(Lcom/huawei/hms/aaid/entity/DeleteTokenReq;I)V = A(Huawei.Hms.Aaid.Entity.DeleteTokenReq, int)
  a(Lcom/huawei/hms/aaid/entity/TokenReq;I)Ljava/lang/String; = A(Huawei.Hms.Aaid.Entity.TokenReq, int)
  a(Ljava/lang/String;)V = A(string)
  deleteAAID()V = DeleteAAID()
  deleteToken(Ljava/lang/String;)V = DeleteToken(string)
  deleteToken(Ljava/lang/String;Ljava/lang/String;)V = DeleteToken(string, string)
  getInstance(Landroid/content/Context;)Lcom/huawei/hms/aaid/HmsInstanceId; = GetInstance(Android.Content.Context)
  getToken(Ljava/lang/String;)Ljava/lang/String; = GetToken(string)
  getToken(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetToken(string, string)
com/huawei/hms/aaid/HmsInstanceIdEx = Huawei.Hms.Aaid.HmsInstanceIdEx
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  b = B
  c = C
  TAG = Tag
  getToken()Lcom/huawei/hmf/tasks/Task; = Token
  a(Ljava/lang/Exception;)Lcom/huawei/hmf/tasks/Task; = A(Java.Lang.Exception)
  a(Ljava/lang/String;)Ljava/lang/String; = A(string)
  deleteAAID(Ljava/lang/String;)V = DeleteAAID(string)
  getAAId(Ljava/lang/String;)Ljava/lang/String; = GetAAId(string)
  getCreationTime(Ljava/lang/String;)J = GetCreationTime(string)
  getInstance(Landroid/content/Context;)Lcom/huawei/hms/aaid/HmsInstanceIdEx; = GetInstance(Android.Content.Context)
com/huawei/hms/aaid/init/AutoInitHelper = Huawei.Hms.Aaid.Init.AutoInitHelper
  <init>()V = .ctor()
  doAutoInit(Landroid/content/Context;)V = DoAutoInit(Android.Content.Context)
  isAutoInitEnabled(Landroid/content/Context;)Z = IsAutoInitEnabled(Android.Content.Context)
  setAutoInitEnabled(Landroid/content/Context;Z)V = SetAutoInitEnabled(Android.Content.Context, bool)
com/huawei/hms/aaid/InitProvider = Huawei.Hms.Aaid.InitProvider
  <init>()V = .ctor()
  delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I = Delete(Android.Net.Uri, string, string[])
  getType(Landroid/net/Uri;)Ljava/lang/String; = GetType(Android.Net.Uri)
  insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri; = Insert(Android.Net.Uri, Android.Content.ContentValues)
  onCreate()Z = OnCreate()
  query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(Android.Net.Uri, string[], string, string[], string)
  update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I = Update(Android.Net.Uri, Android.Content.ContentValues, string, string[])
com/huawei/hms/aaid/plugin/ProxyCenter = Huawei.Hms.Aaid.Plugin.ProxyCenter
  <init>()V = .ctor()
  proxy = Proxy
  getInstance()Lcom/huawei/hms/aaid/plugin/ProxyCenter; = Instance
  getProxy()Lcom/huawei/hms/aaid/plugin/PushProxy; = Proxy
  register(Lcom/huawei/hms/aaid/plugin/PushProxy;)V = Register(Huawei.Hms.Aaid.Plugin.IPushProxy)
com/huawei/hms/aaid/plugin/PushProxy = Huawei.Hms.Aaid.Plugin.IPushProxy
  getPlatform()Lorg/json/JSONObject; = Platform
  getProxyType()Ljava/lang/String; = ProxyType
  deleteAllToken(Landroid/content/Context;)V = DeleteAllToken(Android.Content.Context)
  deleteToken(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = DeleteToken(Android.Content.Context, string, string)
  getToken(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = GetToken(Android.Content.Context, string, string)
  subscribe(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Lcom/huawei/hmf/tasks/Task; = Subscribe(Android.Content.Context, string, string)
  turnOff(Landroid/content/Context;Ljava/lang/String;)Lcom/huawei/hmf/tasks/Task; = TurnOff(Android.Content.Context, string)
  turnOn(Landroid/content/Context;Ljava/lang/String;)Lcom/huawei/hmf/tasks/Task; = TurnOn(Android.Content.Context, string)
  unsubscribe(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Lcom/huawei/hmf/tasks/Task; = Unsubscribe(Android.Content.Context, string, string)
com/huawei/hms/aaid/task/PushClient = Com.Huawei.Hms.Aaid.Task.PushClient
  <init>(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)V = .ctor(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
com/huawei/hms/aaid/task/PushClientBuilder = Com.Huawei.Hms.Aaid.Task.PushClientBuilder
  <init>()V = .ctor()
  buildClient(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)Lcom/huawei/hms/aaid/task/PushClient; = BuildClient(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
com/huawei/hms/aaid/utils/BaseUtils = Com.Huawei.Hms.Aaid.Utils.BaseUtils
  <init>()V = .ctor()
  clearSubjectIds(Landroid/content/Context;)V = ClearSubjectIds(Android.Content.Context)
  deleteAllTokenCache(Landroid/content/Context;)V = DeleteAllTokenCache(Android.Content.Context)
  deleteCacheData(Landroid/content/Context;Ljava/lang/String;)V = DeleteCacheData(Android.Content.Context, string)
  delLocalToken(Landroid/content/Context;Ljava/lang/String;)V = DelLocalToken(Android.Content.Context, string)
  getBaseUrl(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetBaseUrl(Android.Content.Context, string, string, string, string)
  getCacheData(Landroid/content/Context;Ljava/lang/String;Z)Ljava/lang/String; = GetCacheData(Android.Content.Context, string, bool)
  getLocalToken(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = GetLocalToken(Android.Content.Context, string)
  getSubjectIds(Landroid/content/Context;)[Ljava/lang/String; = GetSubjectIds(Android.Content.Context)
  initSecret(Landroid/content/Context;)V = InitSecret(Android.Content.Context)
  reportAaidToken(Landroid/content/Context;Ljava/lang/String;)V = ReportAaidToken(Android.Content.Context, string)
  saveCacheData(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Z)Z = SaveCacheData(Android.Content.Context, string, string, bool)
  saveToken(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = SaveToken(Android.Content.Context, string, string)
  sendPostRequest(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String; = SendPostRequest(Android.Content.Context, string, string, System.Collections.Generic.IDictionary<string, string>)
com/huawei/hms/aaid/utils/PushPreferences = Com.Huawei.Hms.Aaid.Utils.PushPreferences
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  a = A
  getAll()Ljava/util/Map; = All
  clear()Z = Clear()
  containsKey(Ljava/lang/String;)Z = ContainsKey(string)
  getBoolean(Ljava/lang/String;)Z = GetBoolean(string)
  getInt(Ljava/lang/String;)I = GetInt(string)
  getLong(Ljava/lang/String;)J = GetLong(string)
  getString(Ljava/lang/String;)Ljava/lang/String; = GetString(string)
  read()Landroid/content/ContentValues; = Read()
  removeKey(Ljava/lang/String;)Z = RemoveKey(string)
  removeKey([Ljava/lang/String;)Z = RemoveKey(string[])
  save(Ljava/lang/String;Ljava/lang/Object;)Z = Save(string, Java.Lang.Object)
  saveBoolean(Ljava/lang/String;Z)V = SaveBoolean(string, bool)
  saveInt(Ljava/lang/String;Ljava/lang/Integer;)V = SaveInt(string, Java.Lang.Integer)
  saveLong(Ljava/lang/String;Ljava/lang/Long;)V = SaveLong(string, Java.Lang.Long)
  saveMap(Ljava/util/Map;)V = SaveMap(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  saveString(Ljava/lang/String;Ljava/lang/String;)Z = SaveString(string, string)
  write(Landroid/content/ContentValues;)Z = Write(Android.Content.ContentValues)
com/huawei/hms/opendevice/OpenDevice = Huawei.Hms.Opendevice.OpenDevice
  <init>()V = .ctor()
  getOpenDeviceClient(Landroid/app/Activity;)Lcom/huawei/hms/opendevice/OpenDeviceClient; = GetOpenDeviceClient(Android.App.Activity)
  getOpenDeviceClient(Landroid/content/Context;)Lcom/huawei/hms/opendevice/OpenDeviceClient; = GetOpenDeviceClient(Android.Content.Context)
com/huawei/hms/opendevice/OpenDeviceClient = Huawei.Hms.Opendevice.IOpenDeviceClient
  getOdid()Lcom/huawei/hmf/tasks/Task; = Odid
com/huawei/hms/opendevice/OpenDeviceClientImpl = Huawei.Hms.Opendevice.OpenDeviceClientImpl
  <init>(Landroid/app/Activity;)V = .ctor(Android.App.Activity)
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  b = B
  c = C
  getOdid()Lcom/huawei/hmf/tasks/Task; = Odid
com/huawei/hms/opendevice/OpenDeviceHmsClient = Huawei.Hms.Opendevice.OpenDeviceHmsClient
  <init>(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)V = .ctor(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
com/huawei/hms/opendevice/OpenDeviceHmsClientBuilder = Huawei.Hms.Opendevice.OpenDeviceHmsClientBuilder
  <init>()V = .ctor()
  buildClient(Landroid/content/Context;Lcom/huawei/hms/common/internal/ClientSettings;Lcom/huawei/hms/common/internal/BaseHmsClient$OnConnectionFailedListener;Lcom/huawei/hms/common/internal/BaseHmsClient$ConnectionCallbacks;)Lcom/huawei/hms/opendevice/OpenDeviceHmsClient; = BuildClient(Android.Content.Context, Huawei.Hms.Common.Internal.ClientSettings, Huawei.Hms.Common.Internal.BaseHmsClient.IOnConnectionFailedListener, Huawei.Hms.Common.Internal.BaseHmsClient.IConnectionCallbacks)
com/huawei/hms/opendevice/OpenDeviceOptions = Huawei.Hms.Opendevice.OpenDeviceOptions
  <init>()V = .ctor()
com/huawei/hms/opendevice/OpenDeviceTaskApiCall = Huawei.Hms.Opendevice.OpenDeviceTaskApiCall
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string)
  doExecute(Lcom/huawei/hms/opendevice/OpenDeviceHmsClient;Lcom/huawei/hms/common/internal/ResponseErrorCode;Ljava/lang/String;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = DoExecute(Huawei.Hms.Opendevice.OpenDeviceHmsClient, Huawei.Hms.Common.Internal.IResponseErrorCode, string, Huawei.Hmf.Tasks.TaskCompletionSource)
  doExecute(Ljava/lang/Object;Lcom/huawei/hms/common/internal/ResponseErrorCode;Ljava/lang/String;Lcom/huawei/hmf/tasks/TaskCompletionSource;)V = DoExecute(Java.Lang.Object, Huawei.Hms.Common.Internal.IResponseErrorCode, string, Huawei.Hmf.Tasks.TaskCompletionSource)
com/huawei/hms/support/api/entity/opendevice/HuaweiOpendeviceNaming = Huawei.Hms.Support.Api.Entity.Opendevice.IHuaweiOpendeviceNaming
  getOaid = GetOaid
  getOdid = GetOdid
com/huawei/hms/support/api/entity/opendevice/HuaweiOpendeviceStatusCodes = Huawei.Hms.Support.Api.Entity.Opendevice.HuaweiOpendeviceStatusCodes
  <init>()V = .ctor()
  RTN_CODE_INNER_CODE = RtnCodeInnerCode
  RTN_CODE_VENDOR_CODE_ERR = RtnCodeVendorCodeErr
  SUCCESS = Success
com/huawei/hms/support/api/entity/opendevice/OaidReq = Huawei.Hms.Support.Api.Entity.Opendevice.OaidReq
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/opendevice/OaidResp = Huawei.Hms.Support.Api.Entity.Opendevice.OaidResp
  <init>()V = .ctor()
  id = Id
  isTrackLimited = IsTrackLimited
  settingIntent = SettingIntent
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
  getSettingIntent()Landroid/app/PendingIntent; = SettingIntent
  setSettingIntent(Landroid/app/PendingIntent;)V = SettingIntent
  isTrackLimited()Z = TrackLimited
  setTrackLimited(Z)V = TrackLimited
com/huawei/hms/support/api/entity/opendevice/OdidReq = Huawei.Hms.Support.Api.Entity.Opendevice.OdidReq
  <init>()V = .ctor()
com/huawei/hms/support/api/entity/opendevice/OdidResp = Huawei.Hms.Support.Api.Entity.Opendevice.OdidResp
  <init>()V = .ctor()
  id = Id
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
com/huawei/hms/support/api/opendevice/HuaweiOpendevice = Huawei.Hms.Support.Api.Opendevice.HuaweiOpendevice
  <init>()V = .ctor()
  HuaweiOpendeviceApi = HuaweiOpendeviceApi
  OPEN_DEVICE_API = OpenDeviceApi
com/huawei/hms/support/api/opendevice/HuaweiOpendeviceApi = Huawei.Hms.Support.Api.Opendevice.IHuaweiOpendeviceApi
  getOdid(Lcom/huawei/hms/api/HuaweiApiClient;)Lcom/huawei/hms/support/api/client/PendingResult; = GetOdid(Huawei.Hms.Api.HuaweiApiClient)
com/huawei/hms/support/api/opendevice/HuaweiOpendeviceApiImpl = Huawei.Hms.Support.Api.Opendevice.HuaweiOpendeviceApiImpl
  <init>()V = .ctor()
  TAG = Tag
  getOdid(Lcom/huawei/hms/api/HuaweiApiClient;)Lcom/huawei/hms/support/api/client/PendingResult; = GetOdid(Huawei.Hms.Api.HuaweiApiClient)
com/huawei/hms/support/api/opendevice/OdidResult = Huawei.Hms.Support.Api.Opendevice.OdidResult
  <init>()V = .ctor()
  id = Id
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
